JSF + MyBatis 환경에서 **자식 페이지에서 부모 페이지로 값 전달 → 부모 페이지에서 라벨에 표시 → 등록 버튼 클릭 시 `userauth` 테이블 검사 후 등록 처리**하는 코드 예제를 작성해줄게.  

---

## **🔹 기능 요약**
1. **자식 페이지 (`userSelect.xhtml`)**  
   - `input type="radio"`를 사용하여 유저를 선택  
   - 선택한 유저 정보를 `window.opener`를 통해 부모 페이지로 전달  
   - `window.close()`로 자식 페이지 닫기  

2. **부모 페이지 (`userRegister.xhtml`)**  
   - 전달받은 유저 정보를 `h:outputText`(라벨)로 표시  
   - `등록` 버튼 클릭 시 `userauth` 테이블에서 `userid` 존재 여부 확인 후  
     - 존재하면 **등록 불가 메시지 표시**  
     - 존재하지 않으면 **DB에 등록**  

---

## **✅ 1️⃣ 자식 페이지 (`userSelect.xhtml`)**
```xhtml
<h:form id="userForm">
    <h:dataTable value="#{userBean.userList}" var="user">
        <h:column>
            <f:facet name="header">선택</f:facet>
            <input type="radio" name="selectedUser" 
                   value="#{user.userid},#{user.username}" 
                   onclick="sendUserInfo(this.value)">
        </h:column>
        <h:column>
            <f:facet name="header">User ID</f:facet>
            #{user.userid}
        </h:column>
        <h:column>
            <f:facet name="header">User Name</f:facet>
            #{user.username}
        </h:column>
    </h:dataTable>
</h:form>

<script>
function sendUserInfo(userInfo) {
    // 부모 페이지에 값 전달
    if (window.opener && !window.opener.closed) {
        window.opener.receiveUserInfo(userInfo);
    }
    window.close(); // 자식 페이지 닫기
}
</script>
```
✔ **유저를 선택하면 `sendUserInfo()`를 통해 부모 페이지에 값 전달하고 창 닫음.**  
✔ `userInfo` 값은 `"userid,username"` 형식으로 전달됨.  

---

## **✅ 2️⃣ 부모 페이지 (`userRegister.xhtml`)**
```xhtml
<h:form id="registerForm">
    <h:panelGrid columns="2">
        <h:outputLabel value="선택된 유저: " />
        <h:outputText id="selectedUserLabel" value="#{userRegisterBean.selectedUserLabel}" />
    </h:panelGrid>

    <h:commandButton value="등록" action="#{userRegisterBean.registerUser}" />

    <h:messages globalOnly="true" showDetail="true" />
</h:form>

<script>
function receiveUserInfo(userInfo) {
    var userData = userInfo.split(",");
    var userId = userData[0];   // 유저 ID
    var userName = userData[1]; // 유저 이름

    // 부모 페이지의 JSF 라벨 업데이트
    document.getElementById("registerForm:selectedUserLabel").innerText = userId + " " + userName;

    // JSF Managed Bean에 값 전달 (Ajax 없이 hidden field 활용)
    document.getElementById("registerForm:hiddenUserId").value = userId;
    document.getElementById("registerForm:hiddenUserName").value = userName;
}
</script>

<h:inputHidden id="hiddenUserId" value="#{userRegisterBean.selectedUserId}" />
<h:inputHidden id="hiddenUserName" value="#{userRegisterBean.selectedUserName}" />
```
✔ `receiveUserInfo(userInfo)`가 **자식 페이지에서 전달받은 유저 정보를 라벨에 표시**  
✔ `hiddenUserId`와 `hiddenUserName`을 활용해 **JSF Bean에 값 전달**  

---

## **✅ 3️⃣ MyBatis Mapper (`UserAuthMapper.xml`)**
```xml
<mapper namespace="com.example.mapper.UserAuthMapper">
    <!-- 유저가 존재하는지 확인 -->
    <select id="checkUserExists" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM userauth WHERE userid = #{userid}
    </select>

    <!-- 유저 등록 -->
    <insert id="insertUserAuth" parameterType="com.example.model.UserAuth">
        INSERT INTO userauth (userid, username, created_at)
        VALUES (#{userid}, #{username}, NOW())
    </insert>
</mapper>
```
✔ `checkUserExists` → `userid`가 존재하는지 확인  
✔ `insertUserAuth` → 존재하지 않으면 새로운 유저 등록  

---

## **✅ 4️⃣ 부모 페이지의 Bean (`UserRegisterBean.java`)**
```java
@ManagedBean
@ViewScoped
public class UserRegisterBean {
    private String selectedUserId;
    private String selectedUserName;

    @Inject
    private UserAuthMapper userAuthMapper; // MyBatis Mapper

    public String getSelectedUserLabel() {
        return selectedUserId != null ? selectedUserId + " " + selectedUserName : "선택된 유저 없음";
    }

    public void registerUser() {
        if (selectedUserId == null || selectedUserId.isEmpty()) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("유저를 선택하세요."));
            return;
        }

        int exists = userAuthMapper.checkUserExists(selectedUserId);
        if (exists > 0) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "이미 존재하는 유저입니다.", null));
        } else {
            UserAuth newUser = new UserAuth(selectedUserId, selectedUserName);
            userAuthMapper.insertUserAuth(newUser);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("등록 완료!"));
        }
    }

    // Getter & Setter
    public String getSelectedUserId() { return selectedUserId; }
    public void setSelectedUserId(String selectedUserId) { this.selectedUserId = selectedUserId; }

    public String getSelectedUserName() { return selectedUserName; }
    public void setSelectedUserName(String selectedUserName) { this.selectedUserName = selectedUserName; }
}
```
✔ `getSelectedUserLabel()` → **라벨에 "userid username" 형태로 표시**  
✔ `registerUser()`  
  - `checkUserExists()`로 유저가 있는지 확인  
  - 있으면 **에러 메시지 출력**  
  - 없으면 **DB에 등록 후 성공 메시지 출력**  

---

## **🔥 최종 정리**
✅ **자식 페이지**
- 유저 선택 후 **`window.opener.receiveUserInfo(userInfo)`**로 부모 페이지에 전달  
- 전달 후 **자식 페이지 닫기**  

✅ **부모 페이지**
- `receiveUserInfo()`에서 **라벨에 유저 정보 표시**  
- `등록` 버튼 클릭 시  
  - `userauth` 테이블에서 `userid` 존재 여부 확인  
  - **존재하면 등록 불가 메시지**, **없으면 DB에 등록**  

✅ **MyBatis**
- `checkUserExists(userid)` → 존재 여부 체크  
- `insertUserAuth(userid, username)` → 유저 등록  

이제 위 코드대로 하면 **JSF + MyBatis 환경에서 자식 페이지 → 부모 페이지 값 전달 & DB 등록 로직이 정상 작동할 거야!**
