# `@WebListener`에서 `FacesContext`가 null인 문제 해결

`@WebListener`에서 `FacesContext.getCurrentInstance()`가 null을 반환하는 문제는 JSF 라이프사이클과 관련이 있습니다. 이 문제를 해결하기 위한 방법을 제시드립니다.

## 문제 원인

1. **JSF 컨텍스트가 아직 초기화되지 않은 시점**에서 호출
2. **서블릿 컨테이너의 리스너 실행 순서** 문제
3. **HTTP 요청과 무관한 시점**에서 호출 시도

## 해결 방법

### 1. `FacesContext` 대신 `ServletContext` 사용 (권장)

```java
@WebListener
public class MyListener implements ServletContextListener {
    
    @Override
    public void contextInitialized(ServletContextEvent sce) {
        // JSF 컨텍스트 대신 서블릿 컨텍스트 사용
        ServletContext ctx = sce.getServletContext();
        ctx.setAttribute("someKey", "someValue");
    }
}
```

### 2. JSF 이벤트 리스너로 변경 (JSF 2.3+)

```java
@Named
@ApplicationScoped
public class MyAppListener {
    
    public void init(@Observes @Initialized(ApplicationScoped.class) Object event) {
        // 애플리케이션 시작 시 실행
        FacesContext context = FacesContext.getCurrentInstance(); // 이제 사용 가능
    }
}
```

### 3. 지연 초기화 사용 (요청 시점까지 미루기)

```java
@WebListener
public class MyListener implements ServletRequestListener {
    
    @Override
    public void requestInitialized(ServletRequestEvent sre) {
        // HTTP 요청 시점에서 FacesContext 사용 가능
        FacesContext context = FacesContext.getCurrentInstance();
        if(context != null) {
            // 작업 수행
        }
    }
}
```

### 4. `PhaseListener` 구현 (JSF 특정 라이프사이클에서 처리)

```java
public class MyPhaseListener implements PhaseListener {
    
    @Override
    public void beforePhase(PhaseEvent event) {
        FacesContext context = event.getFacesContext();
        // 작업 수행
    }
    
    // 다른 필수 메서드 구현
}
```

## 추가 확인 사항

1. **web.xml 설정 확인**:
```xml
<context-param>
    <param-name>jakarta.faces.DISABLE_FACESSERVLET_TO_XHTML</param-name>
    <param-value>false</param-value>
</context-param>
```

2. **의존성 재확인**:
```xml
<!-- Maven 예제 -->
<dependency>
    <groupId>jakarta.faces</groupId>
    <artifactId>jakarta.faces-api</artifactId>
    <version>4.1</version>
    <scope>provided</scope>
</dependency>
<dependency>
    <groupId>org.glassfish</groupId>
    <artifactId>jakarta.faces</artifactId>
    <version>4.1.3</version>
</dependency>
```

3. **서버 로그 확인**:
   - JSF 구현체(GlassFish Mojarra 등)의 초기화 로그 확인
   - `FacesServlet`이 정상적으로 등록되었는지 확인

## 결론

`@WebListener`는 일반적으로 JSF 컨텍스트가 활성화되기 전에 실행되므로, 위 방법 중 하나를 선택해 구현해야 합니다. 가장 권장하는 방법은 **첫 번째 방법**인 `ServletContextListener`를 사용하는 것입니다. 반드시 JSF 기능이 필요한 경우에는 **두 번째나 네 번째 방법**을 고려하세요.
