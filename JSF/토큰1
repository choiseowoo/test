테스트 환경에서 로그인 화면 없이 토큰을 지정하고, 인증 후 검색 정보를 세션에 저장하는 방법을 설명해 줄게.  

---

## **✅ 1. 로그인 없이 테스트용 토큰 사용하기**
테스트 환경에서는 **고정된 테스트용 토큰**을 사용해서 인증 단계를 생략할 수 있어.  

### **(1) 테스트용 토큰 직접 설정**
```java
public class AuthService {
    public static String getAuthenticatedUserId() {
        // 실제 환경에서는 Authorization 헤더에서 토큰을 추출하지만, 테스트 환경에서는 고정된 ID 반환
        return "test_user_123"; // 테스트용 사용자 ID
    }
}
```
이렇게 하면 **모든 요청에서 `test_user_123`이라는 ID를 반환**하게 돼.

---

## **✅ 2. 검색 정보를 세션에 저장하는 로직**
검색을 실행하면 **검색어와 페이지 번호를 세션에 저장**해서 이후 페이징이나 새로고침 시 활용할 수 있도록 해야 해.

### **(1) 검색 정보 저장 (세션)**
```java
import jakarta.faces.context.FacesContext;
import jakarta.servlet.http.HttpSession;

public class SearchService {
    public void saveSearchCondition(String keyword, int page) {
        HttpSession session = 
            (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(true);
        
        session.setAttribute("searchKeyword", keyword);
        session.setAttribute("searchPage", page);
    }
}
```
✅ **이 메서드는 검색 조건을 세션에 저장하는 역할**을 해.

---

### **(2) 세션에서 검색 조건 불러오기**
```java
public class SearchService {
    public String getSavedKeyword() {
        HttpSession session = 
            (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
        
        return (session != null) ? (String) session.getAttribute("searchKeyword") : null;
    }

    public int getSavedPage() {
        HttpSession session = 
            (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
        
        return (session != null) ? (Integer) session.getAttribute("searchPage") : 1;
    }
}
```
✅ **세션에 저장된 검색 조건을 가져오는 메서드**야.

---

## **✅ 3. 검색 요청 시 토큰 인증 후 세션에 저장**
테스트 환경에서는 로그인 없이 토큰을 직접 설정하고, 검색을 수행할 때 **토큰 인증을 가정하여 세션에 검색 조건을 저장**할 수 있어.

```java
public List<Data> search(String keyword, int page) {
    // 1. 테스트용 사용자 ID 가져오기
    String userId = AuthService.getAuthenticatedUserId();

    if (userId == null) {
        throw new RuntimeException("인증되지 않은 사용자입니다.");
    }

    // 2. 검색 조건을 세션에 저장
    SearchService searchService = new SearchService();
    searchService.saveSearchCondition(keyword, page);

    // 3. MyBatis로 검색 수행
    return new SearchDAO().search(keyword, page, 10);
}
```
✅ **로그인 없이 `test_user_123`을 인증된 사용자로 가정하고, 검색 데이터를 세션에 저장 후 반환**하는 방식이야.

---

## **✅ 4. 페이징, 새로고침 시 세션에서 검색 조건 가져오기**
페이징이나 새로고침이 발생하면 **세션에서 검색어와 페이지 정보를 불러와서 검색을 다시 실행하면 돼.**

```java
public List<Data> getPagedData() {
    SearchService searchService = new SearchService();
    
    String keyword = searchService.getSavedKeyword();
    int page = searchService.getSavedPage();
    
    if (keyword == null) {
        return new ArrayList<>(); // 검색어가 없는 경우 빈 리스트 반환
    }

    return new SearchDAO().search(keyword, page, 10);
}
```
✅ **이제 검색 후 새로고침을 해도 검색어와 페이지 번호가 유지됨.**

---

## **✅ 5. 정리**
| 기능 | 처리 방법 |
|------|--------|
| **로그인 없이 토큰 설정** | `AuthService.getAuthenticatedUserId()`에서 `test_user_123` 반환 |
| **검색 수행 후 세션 저장** | 검색 실행 후 `SearchService.saveSearchCondition()` 호출 |
| **페이징/새로고침 시 검색 조건 유지** | `SearchService.getSavedKeyword()` 및 `getSavedPage()` 활용 |

✅ **이 방식이면 로그인 없이도 토큰 인증을 흉내 내면서 세션을 활용해 검색 정보를 유지할 수 있어.**
