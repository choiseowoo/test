**JSF + MyBatis**에서 **JavaScript**를 사용하여 **다이얼로그 표시** 후 **등록** 또는 **취소** 버튼을 구현하는 방법에 대해 설명드리겠습니다.

이 과정에서 주요한 작업은 **JavaScript로 다이얼로그**를 표시하고, 사용자가 **등록**을 선택하면 JSF Bean 메소드를 호출하여 **등록 작업**을 처리하고, **취소**를 선택하면 다이얼로그를 닫고 아무 작업도 하지 않도록 구현하는 것입니다.

### 단계별 구현

1. **JavaScript로 다이얼로그 표시 및 버튼 클릭 처리**
2. **JSF에서 MyBatis 메소드를 호출하여 등록 처리**
3. **등록 작업 후, 다이얼로그 상태를 처리**

### 예제 구현

#### 1. `index.xhtml` (JSF 페이지)

```xhtml
<h:form id="form">
    <h:outputText value="사용자 정보를 입력하세요:" />

    <!-- 입력 필드 -->
    <h:inputText id="username" value="#{userBean.username}" />

    <h:commandButton value="등록" onclick="showDialog();" type="button" />

    <!-- 등록 다이얼로그 -->
    <h:panelGroup id="dialog" styleClass="dialog" style="display:none;">
        <h:outputText value="정말로 등록하시겠습니까?" />
        <br />
        <h:commandButton value="등록" action="#{userBean.register}" />
        <h:commandButton value="취소" onclick="closeDialog();" type="button" />
    </h:panelGroup>
</h:form>

<!-- JavaScript 코드 -->
<script>
    function showDialog() {
        // 다이얼로그 표시
        document.getElementById('form:dialog').style.display = 'block';
    }

    function closeDialog() {
        // 다이얼로그 숨기기
        document.getElementById('form:dialog').style.display = 'none';
    }
</script>

<!-- 다이얼로그 스타일 -->
<style>
    .dialog {
        border: 1px solid black;
        padding: 10px;
        background-color: #f0f0f0;
    }
</style>
```

#### 2. `UserBean.java` (JSF Bean)

```java
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import org.apache.ibatis.session.SqlSession;

@ManagedBean
@ViewScoped
public class UserBean {
    private String username;
    
    // getter, setter

    public void register() {
        SqlSession session = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            UserMapper mapper = session.getMapper(UserMapper.class);
            // 사용자 등록 로직
            mapper.insertUser(username);  // 예시로 insertUser라는 메소드 사용
            session.commit();
        } finally {
            session.close();
        }
    }
}
```

#### 3. `UserMapper.xml` (MyBatis Mapper)

```xml
<mapper namespace="UserMapper">
    <!-- 사용자 등록 쿼리 -->
    <insert id="insertUser" parameterType="String">
        INSERT INTO users (username) VALUES (#{username})
    </insert>
</mapper>
```

### 동작 설명

1. **사용자 정보 입력 및 등록 버튼 클릭:**
   - 사용자가 **`등록`** 버튼을 클릭하면, JavaScript의 `showDialog()` 함수가 실행되어 다이얼로그가 표시됩니다.
   
2. **등록 다이얼로그:**
   - 다이얼로그에는 **`등록`** 버튼과 **`취소`** 버튼이 있습니다.
   - 사용자가 **`등록`** 버튼을 클릭하면, **`h:commandButton`**을 통해 서버의 **JSF Bean** 메소드인 `register()`가 호출되고, MyBatis를 통해 사용자가 입력한 **`username`** 값을 DB에 저장합니다.
   - **`취소`** 버튼을 클릭하면 `closeDialog()` 함수가 실행되어 다이얼로그가 닫힙니다.

3. **등록 처리:**
   - `register()` 메소드에서 **MyBatis**를 이용하여 사용자 정보를 데이터베이스에 저장합니다. **등록**이 성공하면 다이얼로그를 닫고, 그 외의 후속 작업을 처리할 수 있습니다.

### 주의 사항

- `h:commandButton`은 JSF의 요청 처리 메소드와 통합되므로 **서버 측 로직**을 처리할 수 있습니다. 반면 **input type="button"**과 같은 일반 버튼은 JSF 라이프사이클에 통합되지 않아서, 버튼을 클릭할 때 페이지를 새로고침하지 않고 서버 로직을 실행하려면 JavaScript나 AJAX를 함께 사용해야 합니다.
  
- **다이얼로그**는 기본적으로 숨겨져 있다가 **JavaScript**를 통해 **`display: block`**으로 설정하여 보여줍니다. **`취소`**를 클릭하면 **`display: none`**으로 숨깁니다.

---

이 방법으로, **JSF + MyBatis**를 활용하여 **다이얼로그에서 등록 확인 및 취소** 기능을 구현할 수 있습니다.
