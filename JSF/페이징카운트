### **✅ 검색 건수를 DTO로 넘겨서 페이징 처리하는 방법 (JSF & MyBatis)**  
유저 테이블에서 **검색 건수를 가져와 DTO (`CountDto`)**에 저장하고, **페이징 처리**를 구현하는 방법을 설명합니다.  

---

### **📌 1. `CountDto` 만들기**
검색 건수를 저장할 DTO를 생성합니다.

```java
public class CountDto {
    private int allCount;      // 전체 검색 건수
    private int onePageCount;  // 한 페이지 최대 건수
    private int pageNumber;    // 현재 페이지 번호

    // Getter & Setter
    public int getAllCount() {
        return allCount;
    }
    public void setAllCount(int allCount) {
        this.allCount = allCount;
    }

    public int getOnePageCount() {
        return onePageCount;
    }
    public void setOnePageCount(int onePageCount) {
        this.onePageCount = onePageCount;
    }

    public int getPageNumber() {
        return pageNumber;
    }
    public void setPageNumber(int pageNumber) {
        this.pageNumber = pageNumber;
    }
}
```

---

### **📌 2. `UserService`에서 검색 건수 조회하기**
MyBatis를 사용하여 **유저 검색 건수를 가져오는 메서드**를 작성합니다.

```java
public interface UserMapper {
    // 전체 검색 건수 조회
    int getUserCount(@Param("searchCondition") String searchCondition);
}
```

```xml
<!-- MyBatis XML Mapper -->
<select id="getUserCount" parameterType="string" resultType="int">
    SELECT COUNT(*) 
    FROM user_table
    WHERE username LIKE CONCAT('%', #{searchCondition}, '%')
</select>
```

---

### **📌 3. `UserService`에서 검색 및 페이징 처리**
검색 결과와 검색 건수를 조회한 후, DTO에 저장합니다.

```java
import javax.inject.Inject;
import java.util.List;

public class UserService {
    @Inject
    private UserMapper userMapper;

    public CountDto getUserSearchCount(String searchCondition, int pageNumber, int onePageCount) {
        int allCount = userMapper.getUserCount(searchCondition); // 전체 검색 건수 가져오기

        CountDto countDto = new CountDto();
        countDto.setAllCount(allCount);
        countDto.setOnePageCount(onePageCount);
        countDto.setPageNumber(pageNumber);
        return countDto;
    }
}
```

---

### **📌 4. `UserBean`에서 검색 후 DTO 저장**
JSF `@ManagedBean`을 사용하여 **검색 후 DTO에 검색 건수를 저장**합니다.

```java
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.inject.Inject;

@ManagedBean
@ViewScoped
public class UserBean {
    @Inject
    private UserService userService;

    private CountDto countDto = new CountDto();
    private String searchKeyword;
    private int currentPage = 1;
    private int pageSize = 10;

    // 검색 실행
    public void searchUser() {
        // 검색 건수 조회 후 DTO 저장
        countDto = userService.getUserSearchCount(searchKeyword, currentPage, pageSize);
    }

    // Getter & Setter
    public CountDto getCountDto() {
        return countDto;
    }

    public String getSearchKeyword() {
        return searchKeyword;
    }
    public void setSearchKeyword(String searchKeyword) {
        this.searchKeyword = searchKeyword;
    }

    public int getCurrentPage() {
        return currentPage;
    }
    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }

    public int getPageSize() {
        return pageSize;
    }
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }
}
```

---

### **📌 5. `xhtml`에서 검색 건수와 페이지 정보 출력**
JSF 화면에서 **검색 건수, 페이지 수, 현재 페이지 표시**하기.

```xml
<h:form>
    <h:inputText value="#{userBean.searchKeyword}" />
    <h:commandButton value="검색" action="#{userBean.searchUser}" />

    <h:outputText value="총 검색 건수: #{userBean.countDto.allCount}" />
    <h:outputText value="한 페이지 최대 건수: #{userBean.countDto.onePageCount}" />
    <h:outputText value="현재 페이지: #{userBean.countDto.pageNumber}" />
</h:form>
```

---

### **✅ 결론**
이제 검색을 실행하면:
1. **검색 건수 조회 (`getUserCount`)**
2. **DTO (`CountDto`)에 검색 건수, 최대 페이지 건수, 현재 페이지 저장**
3. **JSF 화면에서 검색 건수와 페이지 정보 출력 가능**

이 방식으로 **페이징 처리를 위한 검색 건수 관리가 가능**합니다.
