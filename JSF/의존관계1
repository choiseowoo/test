### **원인 분석**  
오류 메시지를 보면 **JSF (Jakarta Faces)에서 EL (Expression Language)로 `UserBean`을 찾지 못하고 `null`이 반환된 상황**입니다.  
즉, `UserBean`이 제대로 등록되지 않았거나, `JSF`에서 인식하지 못하는 문제가 발생한 것입니다.  

이 문제는 다음과 같은 원인으로 인해 발생할 수 있습니다.  

---

## **1. `UserBean`이 CDI(ManagedBean)로 인식되지 않음**
### **원인**  
`UserBean`이 JSF에서 관리되는 **CDI Bean으로 인식되지 못한 경우**, EL에서 `UserBean`을 찾을 수 없습니다.  
이 문제는 보통 다음과 같은 경우에 발생합니다.  
- `UserBean`에 `@Named` 또는 `@ManagedBean` 어노테이션이 없거나, 올바르게 설정되지 않음  
- `UserBean`이 `AbstractManagedBean`을 상속하면서 CDI 스캔이 되지 않음  

### **해결 방법**  
**① `UserBean`에 `@Named` 또는 `@ManagedBean` 어노테이션이 있는지 확인**  
아래처럼 `@Named`와 `@ViewScoped` 또는 `@RequestScoped`를 추가했는지 확인하세요.  

```java
import jakarta.inject.Named;
import jakarta.enterprise.context.ViewScoped;
import java.io.Serializable;

@Named("UserBean")
@ViewScoped  // 또는 @RequestScoped
public class UserBean extends AbstractManagedBean implements Serializable {
    private static final long serialVersionUID = 1L;

    // 필드 및 메서드
}
```
만약 `@ManagedBean`을 사용하고 있다면 `jakarta.faces.bean.ManagedBean` 대신 **`jakarta.inject.Named`를 사용하는 것이 좋습니다**.

---

## **2. `common-tool`이 `User` 프로젝트의 CDI 스캔 대상이 아님**
### **원인**  
`common-tool`이 독립적인 프로젝트로 존재하면서 `UserBean`이 `common-tool` 내부에 위치하고 있다면,  
`common-tool`이 **CDI 빈(Bean) 스캔 대상이 되지 않아** `UserBean`을 찾지 못할 수 있습니다.  

### **해결 방법**  
**① `common-tool`에도 `beans.xml` 파일이 존재하는지 확인**  
CDI를 사용하는 프로젝트에는 반드시 `META-INF/beans.xml`(JAR 프로젝트) 또는 `WEB-INF/beans.xml`(WAR 프로젝트) 파일이 있어야 합니다.  
- `common-tool`이 **JAR** 프로젝트라면 `src/main/resources/META-INF/beans.xml`을 추가하세요.  
- `user` 프로젝트가 **WAR** 프로젝트라면 `src/main/webapp/WEB-INF/beans.xml`을 확인하세요.  

#### **`beans.xml` 예제**
```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="https://jakarta.ee/xml/ns/jakartaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee
                           https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd"
       bean-discovery-mode="all">
</beans>
```
**`bean-discovery-mode="all"` 설정을 추가**하여 `common-tool` 내부의 CDI 빈들이 자동으로 스캔되도록 해야 합니다.

---

## **3. `UserBean`이 JSF의 EL 컨텍스트에 등록되지 않음**
### **원인**  
- `faces-config.xml`에서 `UserBean`이 등록되지 않았을 가능성이 있습니다.  

### **해결 방법**  
**① `faces-config.xml` 확인 (필요한 경우 추가)**  
만약 `@ManagedBean`을 사용한다면, `faces-config.xml`에 등록이 필요한 경우가 있습니다.  
```xml
<managed-bean>
    <managed-bean-name>UserBean</managed-bean-name>
    <managed-bean-class>jp.co.sys.system.backingbeans.UserBean</managed-bean-class>
    <managed-bean-scope>view</managed-bean-scope>
</managed-bean>
```
하지만, **`@Named`와 `@ViewScoped`를 사용했다면 이 설정은 필요하지 않습니다.**

---

## **4. 프로젝트 빌드 및 의존성 충돌 문제**
### **원인**  
- `common-tool`을 `user` 프로젝트의 의존성으로 추가했지만, 빌드 과정에서 WildFly가 이를 인식하지 못할 수도 있습니다.  

### **해결 방법**  
**① `mvn clean install` 실행**  
의존성 문제를 해결하기 위해 `user` 프로젝트와 `common-tool` 프로젝트를 **다시 빌드**하세요.  
```sh
mvn clean install -U
```
그 후, WildFly에서 **재배포**한 후 테스트합니다.  

**② `pom.xml`에서 `common-tool` 의존성 추가 시 `provided` 제거**  
만약 `common-tool`의 의존성을 추가할 때 `scope`를 `provided`로 설정했다면 제거해야 합니다.  
```xml
<dependency>
    <groupId>jp.co.engin.system</groupId>
    <artifactId>common-tool</artifactId>
    <version>1.0.0</version>
</dependency>
```
이렇게 하면, `common-tool`이 `user` 프로젝트와 함께 패키징됩니다.

---

## **결론**
`UserBean`이 EL에서 `null`이 되는 원인은 여러 가지가 있지만, 가장 가능성 높은 원인은 다음과 같습니다.  

✅ **`UserBean`에 `@Named("UserBean")` 및 `@ViewScoped` 추가**  
✅ **`common-tool`에 `beans.xml` 추가하여 CDI 스캔 가능하게 설정**  
✅ **`mvn clean install` 후 WildFly 재배포**  

위 작업들을 순서대로 적용하면 `UserBean`을 정상적으로 인식할 수 있을 것입니다.  
적용 후에도 문제가 지속된다면 추가 오류 메시지를 공유해 주세요.
