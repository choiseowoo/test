`@Named("userBean")`을 추가하는 것은 일반적으로 문제가 되지 않습니다. 그러나 **검색 버튼을 눌러도 동작하지 않는다면 몇 가지 확인해야 할 사항**이 있습니다.

---

## **1. JSF에서 `@Named("userBean")`을 사용할 경우 EL(Expression Language)에서 접근 문제**
### **확인할 사항:**
- **JSF의 EL(Expression Language)은 기본적으로 소문자로 시작하는 빈 이름을 사용**합니다.
- `@Named("userBean")`을 명시적으로 선언하면 **EL에서 반드시 `userBean`이라고 참조해야 합니다**.  
- 하지만 `@Named`의 값을 생략하면 기본적으로 클래스명 첫 글자를 소문자로 변환한 `userBean`이 자동 등록됩니다.

✅ **해결 방법**  
```java
@Named("userBean")  // 명시적으로 선언했으므로 EL에서 반드시 #{userBean}을 사용해야 함
@ViewScoped
public class UserBean implements Serializable {
```
➡ **EL 표현이 `<h:commandButton action="#{userBean.searchUsers}"`로 정확하게 매칭되는지 확인하세요.**  
➡ **만약 `@Named`에 값을 설정하지 않았다면 EL에서 `#{userBean}`이 아니라 `#{userbean}`이 될 수도 있습니다.**

---

## **2. `@ViewScoped`를 사용하려면 `jakarta.faces.view.ViewScoped` 임포트 확인**
`@ViewScoped`를 사용할 때, **잘못된 패키지를 임포트하면 작동하지 않을 수 있음**.  
✅ **올바른 `@ViewScoped` 임포트 확인**  
```java
import jakarta.faces.view.ViewScoped;
```
⚠ **만약 아래와 같이 되어 있다면 잘못된 임포트이므로 변경해야 함!**
```java
import javax.faces.bean.ViewScoped;  // 잘못된 임포트 (JSF 2.x 용)
```

---

## **3. 검색 버튼 `<h:commandButton>`이 AJAX 업데이트를 수행하는지 확인**
JSF의 `<h:commandButton>`이 **AJAX를 통해 데이터를 업데이트하지 않으면 결과가 화면에 반영되지 않음**.  
✅ **검색 버튼에서 `update` 속성 확인**
```xml
<h:commandButton value="검색" action="#{userBean.searchUsers}" update="userTable messages" />
```
➡ `update="userTable messages"`가 없으면 검색 결과가 화면에 표시되지 않을 수 있음.  
➡ `@ViewScoped`는 **리다이렉트 없이 같은 페이지에서 동작**하도록 해야 하므로, 리다이렉트(`faces-redirect=true` 등)를 제거해야 함.

---

## **4. `searchUsers()` 메서드가 정상적으로 실행되는지 확인**
✅ **간단한 로그 추가하여 실행 여부 확인**
```java
public void searchUsers() {
    System.out.println("검색 버튼 클릭됨!");  // 실행 확인 로그

    userList.clear();

    if ((userName == null || userName.trim().isEmpty()) && (userCode == null || userCode.trim().isEmpty())) {
        System.out.println("검색 조건 부족");
        addErrorMessage("유저명 또는 코드명을 입력해주세요.");
        return;
    }

    updateUserList(currentPage);

    if (userList.isEmpty()) {
        System.out.println("검색 결과 없음");
        addErrorMessage("검색 결과가 없습니다.");
    } else {
        System.out.println("검색 결과 개수: " + userList.size());
    }
}
```
➡ **콘솔에 `검색 버튼 클릭됨!`이 출력되는지 확인**  
➡ **만약 출력되지 않는다면, 버튼이 정상적으로 `searchUsers()`를 호출하지 못하고 있음**  

---

## **5. `messages` ID를 `<h:messages>`에 적용하여 오류 확인**
✅ **오류 메시지가 정상적으로 화면에 표시되는지 확인**
```xml
<h:messages id="messages" globalOnly="true" />
```
➡ **검색 버튼 클릭 후, `h:messages` 영역에 에러 메시지가 표시되는지 확인**  
➡ **아무런 메시지가 나오지 않으면 `searchUsers()`가 실행되지 않았을 가능성이 큼**  

---

## **6. `userList`가 갱신되었는지 확인**
✅ **검색 결과를 JSF 테이블에 반영하려면, `update="userTable"` 속성이 필요**
```xml
<h:dataTable id="userTable" value="#{userBean.userList}" var="user">
    <h:column><f:facet name="header">이름</f:facet>#{user.name}</h:column>
    <h:column><f:facet name="header">코드</f:facet>#{user.code}</h:column>
    <h:column><f:facet name="header">이메일</f:facet>#{user.email}</h:column>
</h:dataTable>
```
➡ `userList`가 비어 있는 경우 테이블이 출력되지 않을 수 있음  
➡ `searchUsers()` 실행 후 `userList.size()`가 0이 아닌지 확인 필요

---

## **7. 페이지 네비게이션이 정상 동작하는지 확인**
✅ **페이지 이동 시 `updateUserList()`가 실행되는지 로그 확인**
```java
public void nextPage() {
    if (currentPage < totalPages) {
        currentPage++;
        System.out.println("페이지 이동: " + currentPage);
        updateUserList(currentPage);
    }
}
```
➡ **페이지 변경이 발생하는지 확인**  

---

### **🔎 결론: 어떤 부분을 체크해야 할까?**
1. `@Named("userBean")`을 사용했다면 **EL에서 `#{userBean}`이 정확하게 매칭되는지 확인**.
2. `@ViewScoped`가 **`jakarta.faces.view.ViewScoped`로 정확히 임포트되었는지 확인**.
3. 검색 버튼 `<h:commandButton>`에 **`update="userTable messages"`가 추가되어 있는지 확인**.
4. `searchUsers()` 메서드가 실행되는지 **콘솔 로그 (`System.out.println()`)로 확인**.
5. `<h:messages>`에 오류 메시지가 표시되는지 확인.
6. `userList`가 **정상적으로 업데이트되는지 확인**.

➡ 위 사항을 하나씩 체크하면 원인을 찾을 수 있을 겁니다!
