### **📌 `FacesContext.getCurrentInstance()`가 `null`을 반환하는 이유**
`FacesContext.getCurrentInstance()`는 **JSF(JavaServer Faces) 라이프사이클 중에서만 유효**합니다.  
즉, **JSF 요청이 처리되는 동안**에만 `FacesContext`가 생성되며, **JSF 컨텍스트 외부에서는 `null`을 반환**합니다.

---

### **📌 `@WebListener`에서 `FacesContext.getCurrentInstance()`가 `null`인 이유**
`@WebListener`는 **서블릿 컨테이너(WildFly, Tomcat 등)**에서 실행되는 **서블릿 리스너**입니다.  
서블릿 리스너는 **애플리케이션 시작 시점**에 실행되며, 이 시점에는 **JSF 컨텍스트가 아직 초기화되지 않았기 때문에 `FacesContext.getCurrentInstance()`가 `null`**이 됩니다.

✔ **즉, `@WebListener`의 `init()` 메서드는 JSF 요청과는 별개로 실행되므로 `FacesContext`를 사용할 수 없습니다.**  
✔ **JSF 요청이 발생하지 않은 상태에서 `FacesContext.getCurrentInstance()`를 호출하면 항상 `null`이 반환됩니다.**

---

### **📌 `FacesContext.getCurrentInstance()`의 역할**
이 메서드는 현재 실행 중인 JSF 요청의 컨텍스트 정보를 반환하는 역할을 합니다.

- **JSF 요청이 실행 중일 때만 존재**하며, `FacesContext`를 통해 요청, 응답, 세션 등의 정보에 접근할 수 있습니다.
- **JSF 요청이 없는 상태(예: `@WebListener`, `@PostConstruct` 초기화, `@Singleton` Bean 등)에서는 `null`이 반환됨**.

---

### **📌 해결 방법: `ServletContext` 사용하기**
`@WebListener`에서 `FacesContext`를 사용할 수 없으므로, **대신 `ServletContext`를 활용해야 합니다.**  

#### ✅ **1. `@WebListener`에서 `ServletContext`를 사용하여 값을 저장**
```java
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletContextEvent;
import jakarta.servlet.ServletContextListener;
import jakarta.servlet.annotation.WebListener;

@WebListener
public class AppStartupListener implements ServletContextListener {
    @Override
    public void contextInitialized(ServletContextEvent sce) {
        ServletContext context = sce.getServletContext();
        
        // 초기값을 설정하여 저장
        context.setAttribute("globalSetting", "초기값 설정 완료");
        
        System.out.println("🔹 [WebListener] 애플리케이션 시작 - 값 저장 완료");
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        System.out.println("🔹 [WebListener] 애플리케이션 종료");
    }
}
```

---

#### ✅ **2. `JSF Managed Bean`에서 `ServletContext` 값을 가져오기**
JSF 요청이 있을 때는 `FacesContext`에서 `ServletContext`를 가져올 수 있습니다.
```java
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Named;
import jakarta.servlet.ServletContext;

@Named
@RequestScoped
public class ConfigBean {
    public String getGlobalSetting() {
        ServletContext context = (ServletContext) FacesContext.getCurrentInstance()
                .getExternalContext().getContext();
        return (String) context.getAttribute("globalSetting");
    }
}
```

---

#### ✅ **3. JSF 페이지에서 출력 (`index.xhtml`)**
```xml
<h:outputText value="Global Setting: #{configBean.globalSetting}" />
```

---

### **📌 정리**
1. **`FacesContext.getCurrentInstance()`는 JSF 요청 중에만 유효**  
   → JSF 요청이 없는 상태(`@WebListener`, `@Singleton` 등)에서는 `null` 반환됨.
   
2. **애플리케이션 초기화 시에는 `ServletContext`를 활용해야 함**  
   → `@WebListener`에서 `ServletContext.setAttribute()`로 값을 저장하고,  
   → JSF에서 `FacesContext.getCurrentInstance().getExternalContext().getContext()`로 가져옴.

3. **JSF가 실행될 때만 `FacesContext`를 사용할 수 있다**  
   → **웹 애플리케이션 전역 설정이나 초기 데이터는 `ServletContext`에 저장하는 것이 올바른 방법**.

✔ 이렇게 하면 **JSF 요청이 없는 초기화 단계에서도 값을 설정할 수 있고, 이후 JSF 요청이 발생하면 해당 값을 가져와 사용할 수 있습니다.**
