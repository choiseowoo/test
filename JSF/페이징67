그렇게 구현하면 **이전 검색 결과가 유지된 상태에서 새로운 검색 결과가 추가되거나 덮어쓰여질 가능성이 큽니다.**  
**→ 따라서, 검색 실행 전에 기존 검색 데이터를 초기화하는 게 필요합니다.**  

---

## ✅ **해결 방법: 검색 실행 전 초기화**
### 🔹 1. **Java에서 기존 검색 결과 초기화**
```java
public String display() {
    // 기존 검색 결과를 먼저 초기화
    searchResults.clear();  
    currentPage = 1; // 첫 페이지로 초기화

    // 검색 실행
    searchUsers();

    return "getform"; // 화면 갱신
}
```
📌 **변경된 부분**
- `searchResults.clear();` → **기존 검색 결과를 초기화**
- `currentPage = 1;` → **검색 시 항상 첫 페이지부터 시작**

---

### 🔹 2. **JavaScript에서 검색 실행 전 테이블 초기화**
```xml
<script>
    function search() {
        let userName = document.getElementById('searchForm:userName').value.trim();
        let userCode = document.getElementById('searchForm:userCode').value.trim();
        let errorMessageDiv = document.getElementById('errorMessages');

        // 입력값 검증
        if (!userName && !userCode) {
            errorMessageDiv.innerHTML = "이름 또는 코드 중 하나를 입력하세요.";
            errorMessageDiv.style.display = "block";
            return;
        }

        // 🔥 검색 실행 전 기존 데이터 초기화
        document.getElementById("searchResults").innerHTML = "";

        // 검색 실행
        document.getElementById("searchButton").click();
    }
</script>
```
📌 **변경된 부분**
- `document.getElementById("searchResults").innerHTML = "";`  
   → **검색 전 테이블을 초기화하여 이전 검색 결과 제거**  

---

### 🔹 3. **검색 버튼 클릭 시 데이터 초기화 & 페이징 리셋**
```xml
<h:commandButton value="검색" action="#{userBean.display}" update="searchResults" />
```
🔥 **이렇게 하면?**  
✔ **검색 실행 전 기존 데이터 삭제**  
✔ **검색 후 첫 페이지로 이동**  
✔ **페이징 로직이 검색 결과에 따라 올바르게 동작**  

---

## 🚀 **결론**
- **이전 검색 결과가 남아 있는 문제 해결**  
- **검색 실행 전 데이터를 클리어하여 정확한 페이징 유지**  
- **검색 시 항상 첫 페이지부터 시작하도록 개선**  

이제 검색 결과가 쌓이지 않고, 새 검색을 하면 올바르게 페이징이 적용될 거예요! 🔥
