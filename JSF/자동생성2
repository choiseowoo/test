`generatorConfig.xml`에서 `<table>` 태그를 추가하면 여러 개의 테이블을 한 번에 자동 생성할 수 있습니다.  

---

## **1. 여러 개의 테이블 추가하기**
`generatorConfig.xml`에서 `<table>`을 여러 개 추가하면 됩니다.  

### **예제 (`users`, `orders`, `products` 테이블 추가)**  
```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <context id="defaultContext" targetRuntime="MyBatis3">
        
        <!-- DB 연결 설정 -->
        <jdbcConnection driverClass="org.postgresql.Driver"
                        connectionURL="jdbc:postgresql://localhost:5432/mydb"
                        userId="your_username"
                        password="your_password"/>

        <!-- Java 모델 (VO, DTO) 생성 위치 -->
        <javaModelGenerator targetPackage="com.example.model" targetProject="./src/main/java"/>

        <!-- Mapper XML 파일 생성 위치 -->
        <sqlMapGenerator targetPackage="com.example.mapper" targetProject="./src/main/resources"/>

        <!-- Mapper 인터페이스 (DAO) 생성 위치 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.example.dao" targetProject="./src/main/java"/>

        <!-- users 테이블 매핑 -->
        <table tableName="users" domainObjectName="User"/>
        
        <!-- orders 테이블 매핑 -->
        <table tableName="orders" domainObjectName="Order"/>

        <!-- products 테이블 매핑 -->
        <table tableName="products" domainObjectName="Product"/>

    </context>
</generatorConfiguration>
```

---

## **2. 테이블에 따라 다른 패키지로 분리하는 방법**
만약, 테이블별로 **다른 패키지에 파일을 생성하고 싶다면**, `<context>`를 여러 개 만들어 사용하면 됩니다.  

### **예제 (테이블별 패키지 분리)**
```xml
<generatorConfiguration>

    <!-- users 테이블용 설정 -->
    <context id="UserContext" targetRuntime="MyBatis3">
        <jdbcConnection driverClass="org.postgresql.Driver"
                        connectionURL="jdbc:postgresql://localhost:5432/mydb"
                        userId="your_username"
                        password="your_password"/>

        <javaModelGenerator targetPackage="com.example.model.user" targetProject="./src/main/java"/>
        <sqlMapGenerator targetPackage="com.example.mapper.user" targetProject="./src/main/resources"/>
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.example.dao.user" targetProject="./src/main/java"/>

        <table tableName="users" domainObjectName="User"/>
    </context>

    <!-- orders 테이블용 설정 -->
    <context id="OrderContext" targetRuntime="MyBatis3">
        <jdbcConnection driverClass="org.postgresql.Driver"
                        connectionURL="jdbc:postgresql://localhost:5432/mydb"
                        userId="your_username"
                        password="your_password"/>

        <javaModelGenerator targetPackage="com.example.model.order" targetProject="./src/main/java"/>
        <sqlMapGenerator targetPackage="com.example.mapper.order" targetProject="./src/main/resources"/>
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.example.dao.order" targetProject="./src/main/java"/>

        <table tableName="orders" domainObjectName="Order"/>
    </context>

</generatorConfiguration>
```

---

## **3. 실행 방법 (Maven 기준)**
테이블을 추가한 후 **Maven을 사용하여 MyBatis Generator 실행**하면, 추가된 테이블에 대한 코드가 자동 생성됩니다.  

```sh
mvn mybatis-generator:generate
```

### **자동 생성되는 파일**
위 설정에 따라 다음과 같은 파일이 생성됩니다.  

#### **1) `User.java` (users 테이블)**
```java
public class User {
    private Integer id;
    private String name;
    private String email;
    // Getter & Setter
}
```

#### **2) `Order.java` (orders 테이블)**
```java
public class Order {
    private Integer id;
    private Integer userId;
    private String status;
    // Getter & Setter
}
```

#### **3) `Product.java` (products 테이블)**
```java
public class Product {
    private Integer id;
    private String name;
    private Double price;
    // Getter & Setter
}
```

---

## **4. 정리**
1. **테이블을 추가하려면 `<table>`을 여러 개 추가**하면 됨.
2. **테이블별로 패키지를 분리하려면 `<context>`를 나눠서 사용**하면 됨.
3. **Maven 실행 (`mvn mybatis-generator:generate`) 후 자동 생성된 코드 확인**.

이제 원하는 테이블을 추가해서 자동 생성할 수 있습니다!
