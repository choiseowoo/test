### **🔥 전체 코드 (JSF + MyBatis 검색 + 페이징)**
초기 화면에서는 **검색 조건만 표시되고, 데이터 테이블은 보이지 않도록** 수정한 코드입니다.  
- `init()`에서 `userList = new ArrayList<>();` 로 초기화  
- `searchExecuted` 변수를 추가하여 **검색 실행 후에만 테이블을 표시**  
- **검색 후 `totalPages`를 자동 갱신**하여 **페이징 오류 해결**  

---

### **📌 1. MyBatis XML Mapper (검색 + 페이징 쿼리)**

#### **UserMapper.xml**
```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">

    <!-- 검색과 페이징 적용 -->
    <select id="searchUsers" resultType="com.example.model.User">
        SELECT * FROM users
        WHERE 1=1
        <if test="organization != null and organization != ''">
            AND organization = #{organization}
        </if>
        <if test="userName != null and userName != ''">
            AND LOWER(name) LIKE CONCAT('%', LOWER(#{userName}), '%')
        </if>
        <if test="userCode != null and userCode != ''">
            AND code = #{userCode}
        </if>
        <if test="userEmail != null and userEmail != ''">
            AND LOWER(email) LIKE CONCAT('%', LOWER(#{userEmail}), '%')
        </if>
        ORDER BY id
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 전체 개수 조회 -->
    <select id="countUsers" resultType="int">
        SELECT COUNT(*) FROM users
        WHERE 1=1
        <if test="organization != null and organization != ''">
            AND organization = #{organization}
        </if>
        <if test="userName != null and userName != ''">
            AND LOWER(name) LIKE CONCAT('%', LOWER(#{userName}), '%')
        </if>
        <if test="userCode != null and userCode != ''">
            AND code = #{userCode}
        </if>
        <if test="userEmail != null and userEmail != ''">
            AND LOWER(email) LIKE CONCAT('%', LOWER(#{userEmail}), '%')
        </if>
    </select>

</mapper>
```

---

### **📌 2. UserMapper 인터페이스**
```java
import com.example.model.User;
import org.apache.ibatis.annotations.Param;
import java.util.List;

public interface UserMapper {
    List<User> searchUsers(@Param("organization") String organization,
                           @Param("userName") String userName,
                           @Param("userCode") String userCode,
                           @Param("userEmail") String userEmail,
                           @Param("offset") int offset,
                           @Param("pageSize") int pageSize);

    int countUsers(@Param("organization") String organization,
                   @Param("userName") String userName,
                   @Param("userCode") String userCode,
                   @Param("userEmail") String userEmail);
}
```

---

### **📌 3. Java 코드 (JSF + MyBatis 연동)**

#### **UserBean.java**
```java
import com.example.mapper.UserMapper;
import com.example.model.User;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

@Named
@SessionScoped
public class UserBean implements Serializable {
    @Inject
    private UserMapper userMapper;

    private List<User> userList;
    private String organization = "";
    private String userName = "";
    private String userCode = "";
    private String userEmail = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private boolean searchExecuted = false; // 검색 실행 여부

    @PostConstruct
    public void init() {
        userList = new ArrayList<>(); // 초기에는 빈 리스트 유지
    }

    public void searchUsers() {
        int offset = (currentPage - 1) * pageSize;
        userList = userMapper.searchUsers(organization, userName, userCode, userEmail, offset, pageSize);
        
        // 전체 개수 갱신
        int totalRecords = userMapper.countUsers(organization, userName, userCode, userEmail);
        totalPages = (totalRecords + pageSize - 1) / pageSize;  // 반올림 처리
        
        // 페이지 초과 방지
        if (currentPage > totalPages) {
            currentPage = totalPages;
        }
        
        searchExecuted = !userList.isEmpty(); // 검색 실행 여부 체크
    }

    public void goToFirstPage() { 
        currentPage = 1; 
        searchUsers(); 
    }

    public void previousPage() { 
        if (currentPage > 1) { 
            currentPage--; 
            searchUsers(); 
        } 
    }

    public void nextPage() { 
        if (currentPage < totalPages) { 
            currentPage++; 
            searchUsers(); 
        } 
    }

    public void goToLastPage() { 
        currentPage = totalPages; 
        searchUsers(); 
    }

    // Getter & Setter
    public List<User> getUserList() { return userList; }
    public int getCurrentPage() { return currentPage; }
    public int getTotalPages() { return totalPages; }
    public boolean isSearchExecuted() { return searchExecuted; } // 추가
}
```

---

### **📌 4. JSF 페이지 (검색 + 페이징 UI)**

#### **userSearch.xhtml**
```xml
<h:form id="searchForm">
    <table>
        <tr>
            <td>조직:</td>
            <td>
                <h:selectOneMenu id="organization" value="#{userBean.organization}">
                    <f:selectItem itemLabel="전체" itemValue="" />
                    <f:selectItems value="#{userBean.organizationList}" />
                </h:selectOneMenu>
            </td>
            <td>이름:</td>
            <td><h:inputText id="userName" value="#{userBean.userName}" /></td>
        </tr>
        <tr>
            <td>코드:</td>
            <td><h:inputText id="userCode" value="#{userBean.userCode}" /></td>
            <td>이메일:</td>
            <td><h:inputText id="userEmail" value="#{userBean.userEmail}" /></td>
        </tr>
        <tr>
            <td colspan="4">
                <h:commandButton value="검색" action="#{userBean.searchUsers}" update="searchForm" />
            </td>
        </tr>
    </table>

    <!-- 🔹 검색 실행 후에만 테이블 표시 -->
    <h:panelGroup rendered="#{userBean.searchExecuted}">
        <table border="1">
            <thead>
                <tr>
                    <th>이름</th>
                    <th>코드</th>
                    <th>이메일</th>
                </tr>
            </thead>
            <tbody>
                <ui:repeat value="#{userBean.userList}" var="user">
                    <tr>
                        <td>#{user.name}</td>
                        <td>#{user.code}</td>
                        <td>#{user.email}</td>
                    </tr>
                </ui:repeat>
            </tbody>
        </table>

        <div style="text-align: center; margin-top: 10px;">
            <h:commandButton value="<<" action="#{userBean.goToFirstPage}" disabled="#{userBean.currentPage == 1}" update="searchForm" />
            <h:commandButton value="<" action="#{userBean.previousPage}" disabled="#{userBean.currentPage == 1}" update="searchForm" />
            <h:outputText value="페이지 #{userBean.currentPage} / #{userBean.totalPages}" />
            <h:commandButton value=">" action="#{userBean.nextPage}" disabled="#{userBean.currentPage >= userBean.totalPages}" update="searchForm" />
            <h:commandButton value=">>" action="#{userBean.goToLastPage}" disabled="#{userBean.currentPage >= userBean.totalPages}" update="searchForm" />
        </div>
    </h:panelGroup>
</h:form>
```

---

## **🚀 최종 정리**
✅ **초기화면에서 검색 조건만 보이고 테이블 안 나옴**  
✅ **검색 후 데이터가 있을 때만 테이블 표시 (`searchExecuted`)**  
✅ **페이징 시 데이터가 사라지지 않고 정상 동작**  
✅ **조건 검색 후 페이징 동작 유지**  

이제 정상적으로 작동할 거예요! 🚀
