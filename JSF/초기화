## **📌 문제 정리**  
1. **기존 (javax)**  
   - `new` 없이 클래스 초기화하지 않아도 웹 애플리케이션이 정상 동작.  
   - AP 송수신(JSON 데이터 처리).  

2. **현재 (Jakarta 변환 후)**  
   - `new` 없이 초기화하면 **null 에러 발생**.  
   - 로그인 페이지 없음 (테스트 환경).  
   - **AP 송수신 → MyBatis를 사용한 DB 직접 연계로 변경됨**.  
   - `null` 관련 에러가 여러 곳에서 발생함.  

---

## **🔍 원인 분석**  

### **1️⃣ `javax` → `Jakarta` 전환 후 동작 방식 차이**  
- `Jakarta EE`로 변경되면서 **JSF, CDI(의존성 주입), ELResolver의 동작 방식이 변함**.  
- `javax.faces.bean.ManagedBean` → `jakarta.faces.bean.ManagedBean`  
- `javax.inject.Inject` → `jakarta.inject.Inject`  
- CDI의 기본 **Scope 및 초기화 방식이 달라짐** → 명시적으로 `@RequestScoped`, `@SessionScoped` 등을 설정해야 함.  

### **2️⃣ AP 송수신(JSON) → MyBatis DB 연계로 변경**
- 기존에는 **외부 API에서 데이터를 가져왔기 때문에 빈 객체를 사용할 필요가 없었음**.  
- **MyBatis로 DB 직접 연동**하면서 **DTO 및 Mapper 클래스가 필요**해짐.  
- **의존성 주입이 제대로 설정되지 않으면 `null` 에러 발생**.  

### **3️⃣ 로그인 화면 부재의 영향**
- 보통 로그인 화면에서 **세션(User 정보 등)이 초기화됨**.  
- 로그인 페이지 없이 직접 접근하면 **초기화되지 않은 객체를 참조하면서 `null` 에러 발생 가능성 높음**.  

---

## **✅ 해결 방법**  

### **1️⃣ `new` 없이도 객체를 초기화하려면 `@ManagedBean` 또는 `@Named` 사용**  
#### **(기존 `@ManagedBean` → `@Named`로 변경 필요)**  
```java
import jakarta.inject.Named;
import jakarta.enterprise.context.SessionScoped;
import java.io.Serializable;

@Named
@SessionScoped
public class UserBean implements Serializable {
    private String userId;

    public String getUserId() { return userId; }
    public void setUserId(String userId) { this.userId = userId; }
}
```
✅ **이렇게 하면 JSF에서 `#{userBean.userId}`를 사용할 때 자동으로 객체가 생성됨**.  

---

### **2️⃣ `@Inject`로 의존성 주입 확인 (CDI 활성화 필요)**  
- `jakarta.inject.Inject`를 사용해서 `null` 에러 해결.  
```java
import jakarta.inject.Inject;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.context.FacesContext;

@RequestScoped
public class LoginService {
    @Inject
    private UserBean userBean; // 의존성 주입

    public void login() {
        userBean.setUserId("testUser");
    }
}
```
✅ **CDI가 활성화되지 않았다면 `beans.xml`을 생성해야 함**.  

---

### **3️⃣ `beans.xml`이 있는지 확인 (CDI 활성화)**  
- `WEB-INF/beans.xml` 파일이 없으면 `CDI`가 동작하지 않아 `@Inject`가 `null`을 반환할 수 있음.  
- `beans.xml` 파일 추가:  
```xml
<beans xmlns="https://jakarta.ee/xml/ns/jakartaee" version="4.0" bean-discovery-mode="all">
</beans>
```
✅ **이걸 추가하면 CDI가 활성화되고 `@Inject`가 정상 동작함**.  

---

### **4️⃣ 로그인 없이도 세션 초기화 (테스트용 코드 추가)**  
로그인 페이지 없이 바로 접근하면 **세션이 초기화되지 않아 `null`이 발생할 가능성이 큼**.  
테스트 환경에서 임시로 **세션 초기화하는 코드 추가**.  

```java
import jakarta.servlet.http.HttpSession;
import jakarta.faces.context.FacesContext;

public class SessionUtil {
    public static void initSession() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        if (facesContext != null) {
            HttpSession session = (HttpSession) facesContext.getExternalContext().getSession(true);
            session.setAttribute("userId", "testUser");
        }
    }
}
```
✅ **이 코드를 실행하면 `userId`가 자동으로 세션에 저장됨**.  

---

## **🚀 최종 해결 방법**
1. `@ManagedBean` 대신 `@Named`, `@RequestScoped`, `@SessionScoped` 사용.  
2. `@Inject` 사용 시 `beans.xml` 확인 (`WEB-INF/beans.xml` 추가).  
3. 로그인 없이도 `SessionUtil.initSession()`으로 세션 초기화.  
4. 기존 `javax` API를 `Jakarta`로 변경 (`javax.faces.bean.ManagedBean` → `jakarta.inject.Named`).  

✅ **이렇게 하면 `new` 없이도 Jakarta EE 환경에서 객체가 초기화되고 `null` 문제 해결됨!**
