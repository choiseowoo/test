이 문제는 **`@SessionScoped`와 `@ViewScoped`의 동작 방식 차이**에서 기인합니다. `@SessionScoped`에서는 Bean이 세션 전체에서 유지되기 때문에 `userDao`가 초기화되지 않아도 동작할 수 있지만, `@ViewScoped`에서는 Bean이 뷰(페이지) 단위로 관리되기 때문에 `userDao`가 초기화되지 않으면 동작하지 않습니다.

---

### **문제 원인**
1. **`@SessionScoped`에서 동작하는 이유**:
   - `@SessionScoped`는 Bean이 세션 전체에서 유지됩니다.
   - 따라서 `userDao`가 초기화되지 않아도, 다른 요청에서 이미 초기화된 Bean을 재사용할 수 있습니다.
   - 예를 들어, 이전에 다른 페이지에서 `userDao`가 초기화되었다면, 검색 페이지에서도 동일한 Bean을 사용할 수 있습니다.

2. **`@ViewScoped`에서 동작하지 않는 이유**:
   - `@ViewScoped`는 Bean이 현재 뷰(페이지)에서만 유지됩니다.
   - 페이지가 새로 로드되거나 뷰가 변경되면 Bean이 새로 생성됩니다.
   - `userDao`가 초기화되지 않으면, 검색 버튼을 눌러도 `userDao`가 `null`이기 때문에 `NullPointerException`이 발생하거나 아무런 동작을 하지 않습니다.

---

### **해결 방법**
`@ViewScoped`에서도 정상적으로 동작하도록 `userDao`를 초기화해야 합니다. 이를 위해 다음과 같은 방법을 사용할 수 있습니다.

---

### **방법 1: `@PostConstruct`에서 `userDao` 초기화**
`@PostConstruct`를 사용하여 `userDao`를 초기화합니다. 이는 가장 간단하고 명시적인 방법입니다.

```java
@Named
@ViewScoped
public class UserBean implements Serializable {
    private UserDAO userDAO; // userDao 필드

    @PostConstruct
    public void init() {
        userDAO = new UserDAO(); // userDao 초기화
    }

    // 나머지 코드...
}
```

---

### **방법 2: 의존성 주입 사용**
Spring 또는 Java EE 환경이라면 `@Inject` 또는 `@Autowired`를 사용하여 `userDao`를 주입할 수 있습니다.

```java
@Named
@ViewScoped
public class UserBean implements Serializable {
    @Inject // 또는 @Autowired (Spring에서)
    private UserDAO userDAO;

    // 나머지 코드...
}
```

---

### **방법 3: 수동 의존성 주입**
`userDao`를 외부에서 주입할 수 있도록 setter 메서드를 추가합니다.

```java
@Named
@ViewScoped
public class UserBean implements Serializable {
    private UserDAO userDAO;

    public void setUserDAO(UserDAO userDAO) {
        this.userDAO = userDAO;
    }

    @PostConstruct
    public void init() {
        if (userDAO == null) {
            userDAO = new UserDAO(); // 기본 초기화
        }
    }

    // 나머지 코드...
}
```

---

### **왜 `@SessionScoped`에서는 동작했을까?**
- `@SessionScoped`는 Bean이 세션 전체에서 유지됩니다.
- 따라서 `userDao`가 초기화되지 않아도, 다른 요청에서 이미 초기화된 Bean을 재사용할 수 있습니다.
- 예를 들어, 이전에 다른 페이지에서 `userDao`가 초기화되었다면, 검색 페이지에서도 동일한 Bean을 사용할 수 있습니다.

---

### **`@ViewScoped`에서 동작하지 않는 이유**
- `@ViewScoped`는 Bean이 현재 뷰(페이지)에서만 유지됩니다.
- 페이지가 새로 로드되거나 뷰가 변경되면 Bean이 새로 생성됩니다.
- `userDao`가 초기화되지 않으면, 검색 버튼을 눌러도 `userDao`가 `null`이기 때문에 `NullPointerException`이 발생하거나 아무런 동작을 하지 않습니다.

---

### **테스트 방법**
1. **`@PostConstruct` 추가 후 테스트**:
   - `@PostConstruct`에서 `userDao`를 초기화한 후, 검색 버튼을 눌러보세요.
   - 검색 결과가 정상적으로 표시되는지 확인합니다.

2. **`@Inject` 사용 후 테스트**:
   - Spring 또는 Java EE 환경에서 `@Inject`를 사용하여 `userDao`를 주입한 후, 검색 버튼을 눌러보세요.
   - 검색 결과가 정상적으로 표시되는지 확인합니다.

---

### **결론**
- `@SessionScoped`에서는 Bean이 세션 전체에서 유지되기 때문에 `userDao`가 초기화되지 않아도 동작할 수 있습니다.
- `@ViewScoped`에서는 Bean이 뷰(페이지) 단위로 관리되기 때문에 `userDao`를 반드시 초기화해야 합니다.
- `@PostConstruct`에서 `userDao`를 초기화하거나, `@Inject`를 사용하여 의존성을 주입하면 문제가 해결됩니다.

이제 `@ViewScoped`에서도 검색 결과가 정상적으로 표시될 것입니다! 😊
