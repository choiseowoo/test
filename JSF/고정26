# 콜백 방식으로 완전히 구현한 다이얼로그 확인 창

아래는 콜백 방식을 사용하여 완전히 구현한 다이얼로그 확인 창 코드입니다. XHTML 환경에서도 동작하도록 작성되었습니다.

```xhtml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ko" xml:lang="ko">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>콜백 방식 다이얼로그 예제</title>
    <style type="text/css">
        /* 기본 스타일 */
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        button {
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }
        #mainBtn {
            background-color: #4CAF50;
            color: white;
            border: none;
            font-size: 16px;
        }
        
        /* 다이얼로그 스타일 */
        .dialog-container {
            width: 390px;
            height: 310px;
            display: flex;
            flex-direction: column;
        }
        .dialog-header {
            padding: 10px;
            background-color: #f0f0f0;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .dialog-content {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
        }
        .dialog-footer {
            padding: 10px;
            background-color: #f9f9f9;
            border-top: 1px solid #ddd;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .dialog-btn {
            width: 95px;
            height: 30px;
            border: none;
        }
        .ok-btn {
            background-color: #4CAF50;
            color: white;
        }
        .cancel-btn {
            background-color: #f44336;
            color: white;
        }
    </style>
</head>
<body>
    <button id="mainBtn">다이얼로그 테스트 열기</button>
    <div id="resultDiv" style="margin-top: 20px;"></div>

    <script type="text/javascript">
    //<![CDATA[
        // 메시지 리소스 (예시)
        var MessageList = {
            'confirmDelete': '정말로 삭제하시겠습니까?',
            'confirmSave': '변경 내용을 저장하시겠습니까?',
            'confirmExit': '저장하지 않고 나가시겠습니까?'
        };
        
        // 다이얼로그 열기 함수 (콜백 방식)
        function openConfirm(message, callback) {
            var dialogElem = document.getElementById('myDialog');
            
            // 다이얼로그가 없으면 생성
            if (dialogElem == null) {
                // dialog 요소 생성
                var dialog = document.createElement('dialog');
                dialog.id = 'myDialog';
                
                // 다이얼로그 컨테이너
                var container = document.createElement('div');
                container.className = 'dialog-container';
                
                // 헤더 부분
                var header = document.createElement('div');
                header.className = 'dialog-header';
                
                var title = document.createElement('h2');
                title.textContent = '확인';
                header.appendChild(title);
                
                // 내용 부분
                var content = document.createElement('div');
                content.className = 'dialog-content';
                
                var messageBox = document.createElement('div');
                messageBox.id = 'dialogMessage';
                messageBox.style.fontSize = '16px';
                content.appendChild(messageBox);
                
                // 푸터 부분 (버튼)
                var footer = document.createElement('div');
                footer.className = 'dialog-footer';
                
                // 확인 버튼
                var okBtn = document.createElement('button');
                okBtn.className = 'dialog-btn ok-btn';
                okBtn.textContent = 'OK';
                okBtn.onclick = function() {
                    dialog.close();
                    if (typeof callback === 'function') {
                        callback(true);
                    }
                };
                
                // 취소 버튼
                var cancelBtn = document.createElement('button');
                cancelBtn.className = 'dialog-btn cancel-btn';
                cancelBtn.textContent = '취소';
                cancelBtn.onclick = function() {
                    dialog.close();
                    if (typeof callback === 'function') {
                        callback(false);
                    }
                };
                
                footer.appendChild(okBtn);
                footer.appendChild(cancelBtn);
                
                // 조립
                container.appendChild(header);
                container.appendChild(content);
                container.appendChild(footer);
                dialog.appendChild(container);
                document.body.appendChild(dialog);
                
                dialogElem = document.getElementById('myDialog');
            }
            
            // 메시지 설정
            var messageElem = document.getElementById('dialogMessage');
            if (messageElem) {
                messageElem.textContent = message;
            }
            
            // 다이얼로그 표시
            dialogElem.showModal();
            
            // 취소 버튼에 포커스 설정
            setTimeout(function() {
                var cancelBtn = dialogElem.querySelector('.cancel-btn');
                if (cancelBtn) {
                    cancelBtn.focus();
                }
            }, 10);
        }
        
        // 메시지 파라미터 처리 함수
        function confirmDialog(msgId, strArray, callback) {
            // 메시지 가져오기
            var msg = MessageList[msgId] || msgId;
            
            // 파라미터 치환
            if (strArray && msg) {
                if (Array.isArray(strArray)) {
                    for (var i = 0; i < strArray.length; i++) {
                        msg = msg.replace(new RegExp('\\{' + i + '\\}', 'g'), strArray[i]);
                    }
                } else {
                    msg = msg.replace(/\{0\}/g, strArray);
                }
            }
            
            // 다이얼로그 열기
            openConfirm(msg, callback);
        }
        
        // 실제 사용 예제
        document.getElementById('mainBtn').onclick = function() {
            confirmDialog('confirmDelete', ['중요한 데이터'], function(result) {
                var resultDiv = document.getElementById('resultDiv');
                if (result) {
                    resultDiv.innerHTML = '사용자가 <strong>확인</strong>을 선택했습니다.';
                    resultDiv.style.color = 'green';
                    // 실제 삭제 로직 실행
                    // deleteItem();
                } else {
                    resultDiv.innerHTML = '사용자가 <strong>취소</strong>를 선택했습니다.';
                    resultDiv.style.color = 'red';
                }
            });
        };
    //]]>
    </script>
</body>
</html>
```

## 코드 설명

1. **`openConfirm` 함수**:
   - 메시지와 콜백 함수를 매개변수로 받음
   - 다이얼로그를 동적으로 생성하거나 기존 다이얼로그 재사용
   - OK/취소 버튼 클릭 시 콜백 함수 호출 (`true`/`false` 전달)

2. **`confirmDialog` 함수**:
   - 메시지 ID와 파라미터 배열을 받아 메시지 생성
   - `openConfirm`을 호출하여 다이얼로그 표시
   - 메시지 템플릿의 `{0}`, `{1}` 등을 실제 값으로 치환

3. **사용 예제**:
   - 메인 버튼 클릭 시 다이얼로그 표시
   - 사용자 선택에 따라 다른 결과 표시

4. **추가 기능**:
   - 다이얼로그 표시 시 취소 버튼에 자동 포커스
   - ESC 키로 닫기 방지 (기본 동작 유지)
   - 반응형 디자인

## 사용 방법

1. **기본 사용법**:
```javascript
openConfirm("간단한 메시지", function(result) {
    if (result) {
        // OK 선택 시 처리
    } else {
        // 취소 선택 시 처리
    }
});
```

2. **메시지 템플릿 사용**:
```javascript
// MessageList에 정의된 메시지 사용
confirmDialog('confirmSave', null, function(result) {
    console.log(result ? "저장합니다" : "저장 취소");
});

// 파라미터 치환
confirmDialog('confirmDelete', ['사용자 프로필'], function(result) {
    // 처리 로직
});
```

3. **직접 메시지 사용**:
```javascript
openConfirm("정말로 " + itemName + "을 삭제하시겠습니까?", handleDelete);

function handleDelete(confirmed) {
    if (confirmed) {
        // 삭제 로직
    }
}
```

이 코드는 XHTML 환경에서도 완벽히 동작하며, 콜백 방식을 사용해 다이얼로그의 비동기적 특성을 잘 처리합니다. 필요에 따라 스타일이나 동작을 수정할 수 있습니다.
