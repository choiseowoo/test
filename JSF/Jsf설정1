`FacesServlet`은 JavaServer Faces(JSF) 애플리케이션의 핵심 컨트롤러 서블릿으로, JSF 요청과 응답을 처리합니다. `FacesContext.getCurrentInstance()`가 `null`을 반환하는 문제는 주로 `FacesServlet`이 적절하게 설정되지 않았기 때문입니다. 이를 해결하기 위해 `FacesServlet`을 설정하는 방법을 안내드리겠습니다.

**1. `web.xml`에 `FacesServlet` 등록 및 매핑 설정**

`web.xml` 배포 서술자 파일에 `FacesServlet`을 등록하고 URL 패턴을 매핑해야 합니다. 이 설정은 `FacesServlet`이 특정 URL 패턴에 대한 요청을 처리하도록 지정합니다.


```xml
<servlet>
    <servlet-name>FacesServlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>FacesServlet</servlet-name>
    <url-pattern>*.xhtml</url-pattern>
</servlet-mapping>
```


- `<servlet-name>`: 서블릿의 이름을 지정합니다. 위 예제에서는 `FacesServlet`으로 지정했습니다.
- `<servlet-class>`: 서블릿 클래스의 경로를 지정합니다. JSF의 기본 서블릿 클래스는 `javax.faces.webapp.FacesServlet`입니다.
- `<load-on-startup>`: 서블릿의 로딩 순서를 지정합니다. `1`로 설정하면 애플리케이션 시작 시 서블릿이 로드됩니다.
- `<url-pattern>`: `FacesServlet`이 처리할 URL 패턴을 지정합니다. 위 예제에서는 `.xhtml` 확장자를 가진 모든 요청을 처리하도록 설정했습니다.

이러한 설정을 통해 `.xhtml` 확장자를 가진 요청이 `FacesServlet`에 의해 처리되며, 이로써 `FacesContext`가 올바르게 초기화됩니다. citeturn0search1

**2. JSF 라이브러리(JAR 파일) 포함**

JSF 애플리케이션이 정상적으로 동작하려면 필요한 JSF 라이브러리를 프로젝트에 포함해야 합니다. 일반적으로 다음과 같은 JAR 파일이 필요합니다:

- `jsf-api.jar`
- `jsf-impl.jar` 또는 `jsf-ri.jar`
- `jstl.jar` (JSTL 사용 시)

이러한 JAR 파일들을 프로젝트의 `WEB-INF/lib` 디렉토리에 복사하여 포함시킵니다. citeturn0search3

**3. 애플리케이션 서버의 JSF 지원 확인**

사용 중인 애플리케이션 서버가 JSF를 지원하는지 확인해야 합니다. 일부 서버는 기본적으로 JSF를 지원하며, 다른 서버는 별도의 설정이 필요할 수 있습니다. 예를 들어, IBM WebSphere의 경우 써드파티 JSF 구현을 사용할 때 추가적인 설정이 필요할 수 있습니다. citeturn0search4

위의 단계를 따라 `FacesServlet`을 올바르게 설정하면, `FacesContext.getCurrentInstance()`가 `null`을 반환하는 문제를 해결할 수 있을 것입니다. 
