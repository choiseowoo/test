`User` 프로젝트와 `common-tool` 프로젝트 간의 의존성 문제로 인해 WildFly 서버가 기동되지 않을 가능성이 높습니다. 의존성 설정이 잘못되면 클래스나 리소스를 찾을 수 없다는 오류가 발생할 수 있습니다. 아래에서 의존성 설정에 대해 자세히 설명드리겠습니다.

---

### 1. **의존성 방향**
- **`User` 프로젝트가 `common-tool` 프로젝트에 의존해야 합니다.**
  - `User` 프로젝트는 `common-tool` 프로젝트의 클래스, 리소스, 라이브러리 등을 사용해야 하므로, `User` 프로젝트가 `common-tool` 프로젝트를 의존해야 합니다.
  - 반대로 `common-tool` 프로젝트가 `User` 프로젝트를 의존할 필요는 없습니다. 이는 순환 의존성(Circular Dependency) 문제를 일으킬 수 있습니다.

---

### 2. **의존성 설정이 잘못된 경우 발생하는 문제**
- **클래스나 리소스를 찾을 수 없음**:
  - `User` 프로젝트가 `common-tool` 프로젝트의 클래스나 리소스를 사용하려고 하는데, 의존성이 제대로 설정되지 않으면 `ClassNotFoundException` 또는 `NoClassDefFoundError`가 발생할 수 있습니다.
- **배포 실패**:
  - WildFly가 `User` 프로젝트의 WAR 파일을 배포할 때, `common-tool` 프로젝트의 JAR 파일이 포함되어 있지 않으면 배포가 실패할 수 있습니다.

---

### 3. **의존성 설정 확인 및 수정**
#### Maven을 사용하는 경우
`User` 프로젝트의 `pom.xml` 파일에 `common-tool` 프로젝트를 의존성으로 추가해야 합니다.

```xml
<dependencies>
    <!-- 다른 의존성들 -->
    <dependency>
        <groupId>com.example</groupId>
        <artifactId>common-tool</artifactId>
        <version>1.0.0</version>
    </dependency>
</dependencies>
```

- `common-tool` 프로젝트의 `groupId`, `artifactId`, `version`을 정확히 입력해야 합니다.
- `common-tool` 프로젝트가 로컬 Maven 저장소에 설치되어 있는지 확인하세요. 설치되지 않았다면, `common-tool` 프로젝트 디렉토리에서 다음 명령어를 실행하세요:
  ```bash
  mvn clean install
  ```

#### Gradle을 사용하는 경우
`User` 프로젝트의 `build.gradle` 파일에 `common-tool` 프로젝트를 의존성으로 추가하세요.

```groovy
dependencies {
    // 다른 의존성들
    implementation 'com.example:common-tool:1.0.0'
}
```

- `common-tool` 프로젝트가 로컬 Maven 저장소에 설치되어 있는지 확인하세요. 설치되지 않았다면, `common-tool` 프로젝트 디렉토리에서 다음 명령어를 실행하세요:
  ```bash
  ./gradlew publishToMavenLocal
  ```

---

### 4. **WAR 파일에 `common-tool` JAR 포함 확인**
- `User` 프로젝트를 빌드한 후, 생성된 WAR 파일(`mdms2-0.0.1-SNAPSHOT.war`)을 압축 해제하거나 탐색기로 열어서 `WEB-INF/lib` 디렉토리에 `common-tool` 프로젝트의 JAR 파일이 포함되어 있는지 확인하세요.
- JAR 파일이 포함되어 있지 않다면, 의존성 설정이 잘못되었거나 빌드 과정에서 문제가 발생한 것입니다.

---

### 5. **WildFly 배포 디렉토리 확인**
- WildFly의 `standalone/deployments` 디렉토리에 `mdms2-0.0.1-SNAPSHOT.war` 파일이 배포되었는지 확인하세요.
- `mdms2-0.0.1-SNAPSHOT.war.dodeploy` 파일이 생성되었는지 확인하세요. 이 파일은 WildFly에게 해당 WAR 파일을 배포하라는 신호입니다.

---

### 6. **로그 확인**
- WildFly 서버 로그(`standalone/log/server.log`)를 확인하여 더 구체적인 오류 메시지를 찾으세요.
- 다음과 같은 오류가 있는지 확인하세요:
  - `ClassNotFoundException`: 특정 클래스를 찾을 수 없음.
  - `NoClassDefFoundError`: 클래스 정의를 찾을 수 없음.
  - `DeploymentNotFoundException`: 배포 파일을 찾을 수 없음.

---

### 7. **문제 해결 후 재시도**
- 의존성 설정을 수정한 후, `User` 프로젝트를 다시 빌드하고 WAR 파일을 생성하세요.
- 생성된 WAR 파일을 WildFly의 `standalone/deployments` 디렉토리에 배포하고 서버를 재시작하세요.

---

### 8. **추가적인 문제 해결**
만약 위의 방법으로도 문제가 해결되지 않는다면:
- `common-tool` 프로젝트의 빌드 결과물(`common-tool-1.0.0.jar`)을 `User` 프로젝트의 `WEB-INF/lib` 디렉토리에 직접 복사해 보세요.
- WildFly의 모듈 시스템을 사용하여 `common-tool` 프로젝트를 모듈로 등록하고, `User` 프로젝트에서 해당 모듈을 참조하도록 설정할 수 있습니다.

---

### 결론
`User` 프로젝트가 `common-tool` 프로젝트를 의존하도록 설정해야 합니다. 의존성 설정이 잘못되면 WildFly 서버가 기동되지 않거나 배포가 실패할 수 있습니다. 위의 단계를 따라 설정을 확인하고 문제를 해결해 보세요. 추가적으로 로그나 오류 메시지를 공유해 주시면 더 구체적인 도움을 드릴 수 있습니다.
