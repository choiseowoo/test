JSF에서는 일반 HTML 태그 `<table>`, `<tr>`, `<td>`에서 `value` 속성을 직접 사용할 수 없습니다. 하지만 EL 표현식(`#{}`)을 이용하면 데이터를 출력할 수 있고, `<h:inputText>`, `<h:commandButton>` 등을 `<input>`과 `<button>`으로 변경할 수도 있습니다.  

### **JSF를 일반 HTML 테이블 구조로 변경**  
아래는 기존 JSF 컴포넌트를 일반 HTML 테이블, `tr`, `td`, `input`, `button`으로 변환한 코드입니다.  

```xml
<h:form id="searchForm">
    <!-- 검색 조건 -->
    <table border="1">
        <tr>
            <td><label for="organization">조직:</label></td>
            <td>
                <select id="organization" name="organization" value="#{userBean.organization}">
                    <option value="">전체</option>
                    <ui:repeat value="#{userBean.organizationList}" var="org">
                        <option value="#{org}">#{org}</option>
                    </ui:repeat>
                </select>
            </td>

            <td><label for="userName">이름:</label></td>
            <td><input type="text" id="userName" name="userName" value="#{userBean.userName}" /></td>
        </tr>
        <tr>
            <td><label for="userCode">코드:</label></td>
            <td><input type="text" id="userCode" name="userCode" value="#{userBean.userCode}" /></td>

            <td><label for="userEmail">이메일:</label></td>
            <td><input type="text" id="userEmail" name="userEmail" value="#{userBean.userEmail}" /></td>
        </tr>
        <tr>
            <td colspan="4">
                <button type="submit" name="search" value="검색">검색</button>
            </td>
        </tr>
    </table>

    <!-- 검색 결과 테이블 -->
    <table border="1">
        <tr>
            <th>이름</th>
            <th>코드</th>
            <th>이메일</th>
        </tr>
        <ui:repeat value="#{userBean.userList}" var="user">
            <tr>
                <td>#{user.name}</td>
                <td>#{user.code}</td>
                <td>#{user.email}</td>
            </tr>
        </ui:repeat>
    </table>

    <!-- 페이징 컨트롤 -->
    <div id="paginationPanel">
        <button type="submit" name="firstPage" value="<<"
                disabled="#{userBean.currentPage == 1}"><<</button>

        <button type="submit" name="prevPage" value="<"
                disabled="#{userBean.currentPage == 1}"><</button>

        <span>페이지 #{userBean.currentPage} / #{userBean.totalPages}</span>

        <button type="submit" name="nextPage" value=">"
                disabled="#{userBean.currentPage == userBean.totalPages}">></button>

        <button type="submit" name="lastPage" value=">>"
                disabled="#{userBean.currentPage == userBean.totalPages}">>></button>
    </div>
</h:form>
```

---

### **변경 사항**
1. **HTML `<table>` 사용**  
   - `h:panelGrid` → `<table><tr><td>` 구조로 변경  
   - `h:dataTable` → `<table> + <ui:repeat>` 으로 변경  

2. **입력 요소 변경**  
   - `h:selectOneMenu` → `<select> + <ui:repeat>`  
   - `h:inputText` → `<input type="text">`  
   - `h:commandButton` → `<button type="submit">`  

3. **페이징 버튼 변경**  
   - `<h:commandButton>` → `<button type="submit">`  

---

### **주의 사항**
- HTML `<input>`과 `<select>`에서는 `value="#{userBean.xxx}"`을 직접 사용해도 값이 유지되지 않으므로 **JSF와 함께 사용하려면** `f:param`이나 `h:inputHidden`을 활용해야 할 수도 있습니다.
- 검색 버튼, 페이징 버튼은 서버에서 처리해야 하므로 `<button>` 대신 `h:commandButton`을 유지하는 것도 방법입니다.  

이 방식은 **JSF의 `h:form`과 `h:commandButton`을 유지하면서** 일반 HTML 구조로 변환하는 방법입니다.
