부모 페이지에서 **유저 코드**를 검색하여 **권한이 설정되지 않은 경우에는 등록 버튼을 클릭 시 권한을 설정**하고,  
**이미 권한이 설정된 경우에는 에러 페이지를 표시**하는 기능을 구현하려면 다음과 같이 처리할 수 있습니다.  

---

## **📌 구현 방법**  
1. **유저 코드가 권한 테이블에 존재하는지 확인하는 메소드 추가** (`UserAuthBean.java`)  
2. **권한이 없으면 등록 수행, 있으면 에러 페이지로 리다이렉트** (`registerUserAuth` 메소드)  
3. **에러 페이지 (`error.xhtml`) 작성**  

---

## **📌 1. `UserAuthBean.java` (부모 페이지의 백엔드)**
```java
import jakarta.faces.application.FacesMessage;
import jakarta.faces.bean.ManagedBean;
import jakarta.faces.bean.ViewScoped;
import jakarta.faces.context.FacesContext;
import java.io.Serializable;

@ManagedBean
@ViewScoped
public class UserAuthBean implements Serializable {
    private static final long serialVersionUID = 1L;

    private String selectedUserId;
    private String selectedUserName;
    private String selectedUserCode;
    
    private UserMapper userMapper = MyBatisUtil.getSqlSessionFactory().openSession().getMapper(UserMapper.class);

    public void registerUserAuth() {
        if (selectedUserCode == null || selectedUserCode.isEmpty()) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "유저 코드가 선택되지 않았습니다.", null));
            return;
        }

        boolean isAuthorized = userMapper.checkUserAuthorization(selectedUserCode);

        if (isAuthorized) {
            FacesContext facesContext = FacesContext.getCurrentInstance();
            try {
                facesContext.getExternalContext().redirect("error.xhtml");
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            userMapper.registerUserAuthorization(selectedUserCode);
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "권한이 성공적으로 등록되었습니다.", null));
        }
    }

    // Getter & Setter
    public String getSelectedUserId() { return selectedUserId; }
    public void setSelectedUserId(String selectedUserId) { this.selectedUserId = selectedUserId; }
    public String getSelectedUserName() { return selectedUserName; }
    public void setSelectedUserName(String selectedUserName) { this.selectedUserName = selectedUserName; }
    public String getSelectedUserCode() { return selectedUserCode; }
    public void setSelectedUserCode(String selectedUserCode) { this.selectedUserCode = selectedUserCode; }
}
```

---

## **📌 2. `UserMapper.java` (MyBatis 인터페이스)**
```java
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Insert;

public interface UserMapper {
    
    @Select("SELECT COUNT(*) > 0 FROM user_authorization WHERE user_code = #{userCode}")
    boolean checkUserAuthorization(@Param("userCode") String userCode);

    @Insert("INSERT INTO user_authorization (user_code) VALUES (#{userCode})")
    void registerUserAuthorization(@Param("userCode") String userCode);
}
```

---

## **📌 3. `userAuth.xhtml` (부모 페이지)**
```xhtml
<h:form>
    <h:outputLabel value="유저 ID: " />
    <h:outputText id="selectedUserLabel" value="#{userAuthBean.selectedUserId}" />

    <h:outputLabel value="유저명: " />
    <h:outputText id="selectedUserName" value="#{userAuthBean.selectedUserName}" />

    <h:outputLabel value="유저 코드: " />
    <h:outputText id="selectedUserCode" value="#{userAuthBean.selectedUserCode}" />

    <h:commandButton value="유저 검색" onclick="window.open('userSearch.xhtml', '_blank', 'width=800,height=600')" />

    <h:commandButton value="등록" action="#{userAuthBean.registerUserAuth}" />
</h:form>
```

---

## **📌 4. `error.xhtml` (에러 페이지)**
```xhtml
<h:body>
    <h:form>
        <h:outputText value="이미 권한이 설정된 유저입니다." style="color:red;font-size:18px;" />
        <br/>
        <h:commandButton value="돌아가기" onclick="window.history.back();" />
    </h:form>
</h:body>
```

---

## **📌 구현 결과**
1. **부모 페이지에서 유저 검색**  
2. **검색된 유저 코드로 권한 등록을 시도**  
3. **DB에서 해당 유저 코드가 이미 등록되었는지 확인**
   - **없다면 등록 성공 메시지 표시**  
   - **이미 존재하면 `error.xhtml` 페이지로 이동**  

이제 **권한 등록 및 중복 방지 기능이 완벽하게 구현**되었습니다! 🚀
