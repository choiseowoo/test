# XHTML에서 다이얼로그 생성 및 메시지 전송 구현

네, XHTML 환경에서 JavaScript를 사용하여 다이얼로그를 생성하고 `window.open`과 `postMessage`로 다른 HTML 페이지에 메시지를 전송하는 것이 가능합니다. 아래에 완벽한 구현 방법을 설명드리겠습니다.

## 완성 코드 (XHTML 호환 버전)

```xhtml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ko" xml:lang="ko">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>XHTML 다이얼로그 메시지 전송</title>
    <style type="text/css">
        /* 기본 스타일 */
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>메인 페이지</h1>
    <button id="openDialogBtn">다이얼로그 열기</button>
    <p>다이얼로그에서 전송된 메시지: <span id="receivedMessage">없음</span></p>

    <script type="text/javascript">
    //<![CDATA[
        var dialogWindow = null;
        
        // 다이얼로그 열기 함수
        function openDialog() {
            // 다이얼로그 창 열기
            dialogWindow = window.open('dialog.html', 'messageDialog', 
                'width=500,height=300,left=' + (screen.width/2 - 250) + 
                ',top=' + (screen.height/2 - 150) + 
                ',scrollbars=no,resizable=yes');
            
            // 다이얼로그가 로드될 때까지 기다림
            var checkLoaded = setInterval(function() {
                if (dialogWindow && dialogWindow.document.readyState === 'complete') {
                    clearInterval(checkLoaded);
                    
                    // 다이얼로그에 초기 메시지 전송
                    dialogWindow.postMessage({
                        type: 'init',
                        message: '다이얼로그가 성공적으로 열렸습니다.'
                    }, '*');
                    
                    // 다이얼로그 닫힘 감지
                    var checkClosed = setInterval(function() {
                        if (dialogWindow.closed) {
                            clearInterval(checkClosed);
                            dialogWindow = null;
                        }
                    }, 100);
                }
            }, 100);
        }
        
        // 메시지 수신 리스너
        window.addEventListener('message', function(event) {
            // 보안을 위해 origin 확인 (실제 구현시 특정 도메인으로 변경)
            // if (event.origin !== "http://yourdomain.com") return;
            
            if (event.data && event.data.type === 'dialogMessage') {
                document.getElementById('receivedMessage').textContent = event.data.content;
                
                // 필요시 다이얼로그 닫기
                // if (event.data.closeDialog && dialogWindow) {
                //     dialogWindow.close();
                // }
            }
        });
        
        // 버튼 이벤트 연결
        document.getElementById('openDialogBtn').onclick = openDialog;
    //]]>
    </script>
</body>
</html>
```

## dialog.html (자식 페이지)

```xhtml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ko" xml:lang="ko">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>메시지 다이얼로그</title>
    <style type="text/css">
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        .dialog-container {
            max-width: 100%;
        }
        textarea {
            width: 100%;
            height: 100px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="dialog-container">
        <h2>메시지 다이얼로그</h2>
        <div id="statusMessage">메인 페이지로부터의 초기 메시지가 여기에 표시됩니다.</div>
        <textarea id="messageInput" placeholder="보낼 메시지를 입력하세요"></textarea>
        <button id="sendBtn">메시지 전송</button>
        <button id="closeBtn">닫기</button>
    </div>

    <script type="text/javascript">
    //<![CDATA[
        // 메인 페이지로부터 메시지 수신
        window.addEventListener('message', function(event) {
            // 보안을 위해 origin 확인 (실제 구현시 특정 도메인으로 변경)
            // if (event.origin !== "http://yourdomain.com") return;
            
            if (event.data && event.data.type === 'init') {
                document.getElementById('statusMessage').textContent = event.data.message;
            }
        });
        
        // 메시지 전송 함수
        function sendMessage() {
            var message = document.getElementById('messageInput').value;
            if (message.trim() === '') return;
            
            window.opener.postMessage({
                type: 'dialogMessage',
                content: message,
                timestamp: new Date().toLocaleTimeString()
            }, '*');
            
            document.getElementById('messageInput').value = '';
        }
        
        // 버튼 이벤트 연결
        document.getElementById('sendBtn').onclick = sendMessage;
        document.getElementById('closeBtn').onclick = function() {
            window.close();
        };
        
        // 엔터 키로도 메시지 전송 가능
        document.getElementById('messageInput').onkeypress = function(e) {
            if (e.keyCode === 13) {
                sendMessage();
                return false;
            }
        };
    //]]>
    </script>
</body>
</html>
```

## 구현 핵심 포인트

1. **XHTML 호환성 유지**
   - 모든 태그는 소문자로 작성
   - 모든 속성값은 따옴표로 감쌈
   - JavaScript 코드는 CDATA 섹션으로 감쌈
   - 빈 요소는 `/`로 닫음 (`<br />` 형태)

2. **postMessage 통신**
   - `window.opener.postMessage()`로 부모 창에 메시지 전송
   - 메시지 객체에 `type` 필드를 포함시켜 메시지 구분
   - 수신 측에서는 `event.data`로 메시지 접근

3. **보안 고려사항**
   - 실제 구현시 `postMessage`의 두 번째 인자(targetOrigin)를 특정 도메인으로 지정
   - 수신 측에서 `event.origin` 검증

4. **다이얼로그 관리**
   - `window.open()`으로 열린 창의 참조 유지
   - 창 닫힘 감지를 위해 `setInterval`로 주기적 확인

## 추가 기능 구현 예시

1. **다이얼로그에서 결과 반환 후 자동 닫기**
```javascript
// 다이얼로그에서
window.opener.postMessage({
    type: 'dialogResult',
    result: 'success',
    data: { /* 결과 데이터 */ }
}, '*');
window.close();
```

2. **부모 창에서 다이얼로그 제어**
```javascript
// 부모 창에서
if (dialogWindow) {
    dialogWindow.postMessage({
        type: 'updateTitle',
        newTitle: '새 제목'
    }, '*');
}
```

3. **양방향 실시간 통신**
```javascript
// 양쪽 모두에 구현
window.addEventListener('message', function(event) {
    if (event.data.type === 'ping') {
        event.source.postMessage({
            type: 'pong',
            time: new Date().getTime()
        }, event.origin);
    }
});
```

이 구현 방식은 XHTML의 엄격한 문법을 준수하면서도 현대적인 JavaScript 기능을 사용할 수 있게 해줍니다. 실제 프로젝트에 적용할 때는 보안 설정(targetOrigin)을 반드시 적용하시기 바랍니다.
