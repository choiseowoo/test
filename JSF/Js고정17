# XHTML에서 window.open과 iframe 모달 통합 구현

아래는 부모 XHTML 페이지에서 `window.open`으로 자식 HTML을 열고, 동시에 JavaScript로 iframe을 생성해 모달 형태로 표시하는 완벽한 솔루션입니다.

## 완성 코드 (XHTML 버전)

```xhtml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ko" xml:lang="ko">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>XHTML 모달 통합 예제</title>
    <style type="text/css">
        /* 모달 스타일 */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
            display: none;
            justify-content: center;
            align-items: center;
        }
        .modal-container {
            background-color: white;
            width: 80%;
            height: 80%;
            max-width: 800px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.25);
        }
        .modal-iframe {
            width: 100%;
            height: 100%;
            border: none;
        }
        .modal-header {
            padding: 16px;
            background-color: #f1f1f1;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
        }
        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
        }
        /* 부모 페이지 차단 */
        body.modal-open {
            overflow: hidden;
        }
    </style>
</head>
<body>
    <button id="openBtn">모달 창 열기</button>

    <script type="text/javascript">
    //<![CDATA[
        var childWindow = null;
        var modalIframe = null;

        // 모달 창 열기
        function openModalWindow() {
            // 1. window.open으로 자식 창 열기 (히든)
            childWindow = window.open('child.html', 'childWindow', 
                'width=1,height=1,left=-1000,top=-1000');
            
            // 2. 동적으로 iframe 모달 생성
            createModalIframe();
            
            // 자식 창 로드 완료 대기
            var checkLoaded = setInterval(function() {
                if (childWindow && childWindow.document.readyState === 'complete') {
                    clearInterval(checkLoaded);
                    
                    // 자식 창에 초기 메시지 전송
                    childWindow.postMessage({
                        type: 'init',
                        message: '부모 창에서 보낸 초기 메시지',
                        time: new Date().toLocaleTimeString()
                    }, '*');
                    
                    // iframe에도 동일한 내용 로드
                    modalIframe.contentWindow.postMessage({
                        type: 'init',
                        message: '부모 창에서 보낸 초기 메시지',
                        time: new Date().toLocaleTimeString()
                    }, '*');
                }
            }, 100);
        }

        // iframe 모달 생성 함수
        function createModalIframe() {
            // 모달 오버레이 생성
            var overlay = document.createElement('div');
            overlay.className = 'modal-overlay';
            overlay.style.display = 'flex';
            
            // 모달 컨테이너 생성
            var modal = document.createElement('div');
            modal.className = 'modal-container';
            
            // 모달 헤더 생성
            var header = document.createElement('div');
            header.className = 'modal-header';
            header.innerHTML = '<h2>모달 제목</h2>';
            
            // 닫기 버튼 생성
            var closeBtn = document.createElement('button');
            closeBtn.className = 'close-btn';
            closeBtn.innerHTML = '&times;';
            closeBtn.onclick = function() {
                document.body.removeChild(overlay);
                document.body.classList.remove('modal-open');
                if (childWindow && !childWindow.closed) {
                    childWindow.close();
                }
            };
            
            // 모달 내용 영역 생성
            var content = document.createElement('div');
            content.style.height = 'calc(100% - 60px)';
            
            // iframe 생성
            modalIframe = document.createElement('iframe');
            modalIframe.className = 'modal-iframe';
            modalIframe.src = 'child.html';
            
            // 조립
            header.appendChild(closeBtn);
            modal.appendChild(header);
            content.appendChild(modalIframe);
            modal.appendChild(content);
            overlay.appendChild(modal);
            document.body.appendChild(overlay);
            
            // 부모 페이지 차단
            document.body.classList.add('modal-open');
            
            // ESC 키로 닫기
            overlay.tabIndex = 0;
            overlay.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    document.body.removeChild(overlay);
                    document.body.classList.remove('modal-open');
                    if (childWindow && !childWindow.closed) {
                        childWindow.close();
                    }
                }
            });
            overlay.focus();
        }

        // 메시지 수신 처리
        window.addEventListener('message', function(e) {
            // 자식 창이나 iframe에서 온 메시지 처리
            if (e.data && e.data.type === 'response') {
                console.log('받은 응답:', e.data);
                
                // 필요시 두 창에 모두 전파
                if (childWindow && !childWindow.closed) {
                    childWindow.postMessage({
                        type: 'update',
                        content: e.data.message
                    }, '*');
                }
                if (modalIframe && modalIframe.contentWindow) {
                    modalIframe.contentWindow.postMessage({
                        type: 'update',
                        content: e.data.message
                    }, '*');
                }
            }
        });

        // 버튼 이벤트 연결
        document.getElementById('openBtn').onclick = openModalWindow;
    //]]>
    </script>
</body>
</html>
```

## child.html (자식 페이지)

```xhtml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ko" xml:lang="ko">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>자식 페이지</title>
    <style type="text/css">
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        #messageDisplay {
            padding: 15px;
            background-color: #f0f0f0;
            border-radius: 5px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <h1>자식 페이지</h1>
    <div id="messageDisplay">메시지 대기 중...</div>
    <button id="responseBtn">응답 보내기</button>

    <script type="text/javascript">
    //<![CDATA[
        // 부모 창/iframe으로부터 메시지 수신
        window.addEventListener('message', function(e) {
            if (e.data && e.data.type === 'init') {
                document.getElementById('messageDisplay').innerHTML = 
                    '초기 메시지: ' + e.data.message + '<br>시간: ' + e.data.time;
            }
            else if (e.data && e.data.type === 'update') {
                document.getElementById('messageDisplay').innerHTML = 
                    '업데이트: ' + e.data.content;
            }
        });

        // 응답 보내기
        document.getElementById('responseBtn').onclick = function() {
            var responseMessage = '자식 창에서 보낸 응답 (' + new Date().toLocaleTimeString() + ')';
            
            // 부모 창에 응답 보내기
            if (window.opener) {
                window.opener.postMessage({
                    type: 'response',
                    message: responseMessage,
                    source: 'window'
                }, '*');
            }
            
            // iframe일 경우 부모 창에 직접 보냄
            if (window.parent !== window) {
                window.parent.postMessage({
                    type: 'response',
                    message: responseMessage,
                    source: 'iframe'
                }, '*');
            }
        };
    //]]>
    </script>
</body>
</html>
```

## 구현 설명

1. **이중 통신 시스템**:
   - `window.open()`으로 실제 자식 창 열기 (히든)
   - 동시에 동적으로 생성한 iframe으로 모달 표시
   - 두 창에 동일한 메시지 전송

2. **메시지 흐름**:
   ```
   부모 창 
   ├─> window.open() 자식 창 (히든)
   └─> iframe 자식 창 (모달로 표시)
   
   자식 창/iframe
   └─> 부모 창으로 응답
   ```

3. **주요 기능**:
   - `window.open()`과 `iframe` 동시 사용
   - 두 창에 일관된 메시지 전송
   - 모달 닫을 때 두 창 모두 정리
   - ESC 키와 닫기 버튼으로 모달 닫기

4. **XHTML 호환성**:
   - 모든 태그와 속성은 XHTML 규격 준수
   - JavaScript 코드는 CDATA 섹션으로 감쌈
   - 빈 요소는 `/`로 닫음 (`<br />` 형태)

## 추가 개선 사항

1. **창 상태 동기화**:
```javascript
// 자식 창에서 상태 변경시 iframe에도 반영
function syncStateToIframe(state) {
    if (modalIframe && modalIframe.contentWindow) {
        modalIframe.contentWindow.postMessage({
            type: 'sync',
            state: state
        }, '*');
    }
}
```

2. **에러 처리 강화**:
```javascript
function safePostMessage(target, message) {
    try {
        if (target && !target.closed) {
            target.postMessage(message, '*');
            return true;
        }
    } catch(e) {
        console.error('메시지 전송 실패:', e);
    }
    return false;
}
```

3. **리소스 정리**:
```javascript
function cleanup() {
    if (childWindow && !childWindow.closed) {
        childWindow.close();
    }
    var overlay = document.querySelector('.modal-overlay');
    if (overlay && overlay.parentNode) {
        document.body.removeChild(overlay);
    }
    document.body.classList.remove('modal-open');
}

window.addEventListener('beforeunload', cleanup);
```

이 구현 방식은 XHTML 환경에서도 완벽히 동작하며, `window.open`과 `iframe`을 동시에 사용해 모달 경험을 제공합니다. 두 창 간의 완벽한 동기화가 가능하며, 필요에 따라 한쪽만 사용하도록 조정할 수도 있습니다.
