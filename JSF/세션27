이해했습니다! 이제 `index.xhtml`에서 **세션 값**을 설정하고, `xxxx01.xhtml`에서 **세션 값을 읽는** 방식으로 해결해야 한다는 점을 확실히 이해했습니다.

`index.xhtml`에서는 **자바스크립트**에서 세션 값을 저장하고, `xxxx01.xhtml`에서 `getMsSession` 클래스를 사용하여 세션 값을 읽어오는 구조입니다. 세션 값은 **`index.xhtml`에서 설정**해야 하고, `xxxx01.xhtml`에서 읽는 것입니다.

### **1. `index.xhtml`에서 세션 값 설정**

`index.xhtml`에서는 자바스크립트로 세션 값을 설정합니다. 이때 중요한 점은 **서버 측**에서 세션에 값을 저장해야 한다는 것입니다. **JSF**에서는 자바스크립트를 통해 세션 값을 설정하는 것이 직접적으로 불가능하므로, JSF의 **`SessionBean`**이나 **`SessionManager`**를 사용해야 합니다.

그러나 요청하신대로, 세션 값을 **자바스크립트에서 바로 설정**하고 페이지를 이동하려면, **서버 측에서 세션을 설정하는 방법**을 고려해야 합니다.

#### **index.xhtml 코드 (세션 값 설정)**

`index.xhtml`에서 자바스크립트로 페이지가 로드되면 세션에 값을 저장하고, 다른 페이지로 이동하는 방식입니다.

```xml
<h:form id="form">
    <h:commandButton id="saveSessionData" value="Save to Session" action="#{sessionManager.saveToSession}" />
</h:form>

<script type="text/javascript">
    window.onload = function() {
        // 자바스크립트에서 세션에 값을 설정하고 다른 페이지로 이동
        var userId = 'testUser'; // 예시 사용자 ID
        var userRole = 'admin';  // 예시 사용자 역할
        var token = 'sampleToken'; // 예시 토큰

        // Hidden Input에 값 할당
        document.getElementById('form:userId').value = userId;
        document.getElementById('form:userRole').value = userRole;
        document.getElementById('form:token').value = token;

        // 세션에 값을 저장할 버튼 클릭
        document.getElementById('form:saveSessionData').click();

        // 다른 페이지로 이동
        window.location.href = 'xxxx01.xhtml'; // 새로운 페이지로 이동
    };
</script>
```

### **2. `SessionManager` 클래스에서 세션에 값 저장**

`SessionManager` 클래스에서 세션 값을 저장하는 코드를 작성합니다. 이 클래스는 세션에 값을 저장하고, 이를 `xxxx01.xhtml`에서 참조할 수 있게 합니다.

```java
import jakarta.faces.context.FacesContext;
import jakarta.servlet.http.HttpSession;

public class SessionManager {

    // 세션에 값 저장
    public void saveToSession() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        if (facesContext != null) {
            HttpSession session = (HttpSession) facesContext.getExternalContext().getSession(true);
            
            // 세션에 값을 저장
            String userId = facesContext.getExternalContext().getRequestParameterMap().get("userId");
            String userRole = facesContext.getExternalContext().getRequestParameterMap().get("userRole");
            String token = facesContext.getExternalContext().getRequestParameterMap().get("token");

            session.setAttribute("USER_ID", userId);
            session.setAttribute("USER_ROLE", userRole);
            session.setAttribute("TOKEN", token);
        }
    }
}
```

### **3. `xxxx01.xhtml`에서 세션 값 읽기**

`xxxx01.xhtml`에서 `getMsSession` 클래스를 사용하여 세션에 저장된 값을 읽어옵니다. `MsSession` 클래스에서 세션 정보를 가져오는 코드가 이미 있다고 가정합니다.

```xml
<h:form>
    <h:outputText value="User ID: #{sessionBean.userId}" />
    <h:outputText value="User Role: #{sessionBean.userRole}" />
    <h:outputText value="Token: #{sessionBean.token}" />
</h:form>
```

### **4. `MsSession` 클래스에서 세션 읽기**

세션 값이 제대로 저장되었다면, `MsSession` 클래스에서 `getMsSession` 메소드를 사용하여 세션을 읽을 수 있습니다. 이 클래스는 세션에 저장된 값을 가져오는 역할을 합니다.

```java
public static MsSession getMsSession() {
    if (FacesContext.getCurrentInstance() == null) {
        return null;
    }
    ExternalContext extContext = FacesContext.getCurrentInstance().getExternalContext();
    if (extContext == null) {
        return null;
    }
    HttpServletRequest servletRequest = (HttpServletRequest) extContext.getRequest();
    if (servletRequest == null) {
        return null;
    }
    HttpSession session = servletRequest.getSession();
    if (session == null) {
        return null;
    }

    MsSession msSession = (MsSession) session.getAttribute("framework.session");
    return msSession;
}
```

### **결론**

1. `index.xhtml`에서 자바스크립트를 사용하여 세션 값(`userId`, `userRole`, `token`)을 저장하고 다른 페이지로 이동합니다.
2. `SessionManager` 클래스에서 `saveToSession` 메소드를 사용해 서버 측에서 세션에 값을 저장합니다.
3. `xxxx01.xhtml`에서 `getMsSession` 클래스를 사용하여 세션 값을 읽어옵니다.

이 방식대로 **`index.xhtml`에서 세션에 값을 저장**하고 **`xxxx01.xhtml`에서 세션 값을 읽어올 수 있습니다**.
