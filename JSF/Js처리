`window.showModalDialog()`는 과거의 방식으로, 새 창을 열면서 **두 번째 인수(message 등)를 자식 창에서 `window.dialogArguments`로 받을 수 있는 기능**이 있었습니다. 그러나 `window.open()`은 기본적으로 이러한 방식으로 데이터를 전달하지 않습니다.  

### **해결 방법**  

#### **1. URL 쿼리스트링으로 데이터 전달**  
`window.open()`에서는 데이터를 URL에 포함하여 전달할 수 있습니다.  
```javascript
var message = "Hello, this is a test!";
window.open('test.html?message=' + encodeURIComponent(message), '_blank', 'width=600,height=400');
```
**test.html (자식 창)에서 데이터 가져오기:**
```javascript
var urlParams = new URLSearchParams(window.location.search);
var message = urlParams.get('message');
if (message) {
    document.getElementById('messageDisplay').innerText = message;
}
```
✅ **장점:** 간단하고, 새 창에서도 데이터를 쉽게 받을 수 있음.  
❌ **단점:** 긴 데이터는 전달이 어려움 (URL 길이 제한).  

---

#### **2. `window.postMessage()`를 사용 (추천)**
부모 창에서 새 창을 연 후, `postMessage()`를 사용하여 데이터를 보낼 수 있습니다.  
```javascript
var newWindow = window.open('test.html', '_blank', 'width=600,height=400');
setTimeout(() => {
    newWindow.postMessage("Hello, this is a test!", "*");
}, 1000);  // 새 창이 로드될 시간을 고려하여 약간의 지연 추가
```
**test.html (자식 창)에서 데이터 받기:**
```javascript
window.addEventListener("message", function(event) {
    document.getElementById('messageDisplay').innerText = event.data;
});
```
✅ **장점:** 긴 문자열, 객체 등도 쉽게 전달 가능.  
❌ **단점:** `postMessage()`는 부모 창이 실행된 후 데이터를 보내야 함 (약간의 딜레이 필요).  

---

#### **3. `localStorage` 또는 `sessionStorage` 사용**  
부모 창에서 데이터 저장:  
```javascript
sessionStorage.setItem('message', 'Hello, this is a test!');
window.open('test.html', '_blank', 'width=600,height=400');
```
**test.html (자식 창)에서 데이터 읽기:**  
```javascript
window.onload = function() {
    var message = sessionStorage.getItem('message');
    if (message) {
        document.getElementById('messageDisplay').innerText = message;
        sessionStorage.removeItem('message'); // 한 번 사용 후 제거
    }
};
```
✅ **장점:** 긴 데이터도 문제없이 저장 가능.  
❌ **단점:** 부모 창과 같은 도메인에서만 사용 가능.  

---

#### **결론**  
- **간단한 데이터**라면 `URL 쿼리스트링` 방식이 가장 쉽습니다.  
- **다양한 데이터 (객체, 긴 문자열 등)**를 전달하려면 `postMessage()` 방식이 유용합니다.  
- **같은 도메인에서만 사용하는 경우**라면 `sessionStorage`도 좋은 선택입니다.  

현재 상황에 맞는 방법을 적용해 보세요!
