### **📌 Maven 프로젝트에서 JAR 파일 배포 시 경로 설정 방법**  
Maven 프로젝트를 배포할 때, **외부 JAR(`stringutil.jar`)을 어디에 두고, 어떻게 참조할지** 고민이 필요합니다.  
**배포 환경(운영 서버)에서도 동일하게 동작해야 하기 때문**에 최적의 설정 방법을 설명해드립니다.  

---

## **✅ 1. `lib/` 폴더를 프로젝트 내부에 배치 (권장 방법)**
프로젝트 내에 `lib/` 폴더를 만들고, 거기에 JAR 파일을 두는 것이 가장 일반적인 방법입니다.  

### **📌 프로젝트 구조 예시**
```
mdms/
│── src/
│── target/
│── lib/                    ← 외부 JAR 폴더
│   └── stringutil.jar
│── pom.xml
```

### **📌 `pom.xml` 설정 (systemPath)**
```xml
<dependency>
    <groupId>org.stringutil</groupId>
    <artifactId>stringutil</artifactId>
    <version>1.0.0</version>
    <scope>system</scope>
    <systemPath>${project.basedir}/lib/stringutil.jar</systemPath>
</dependency>
```
✅ `systemPath`에 **`${project.basedir}/lib/stringutil.jar`** 로 설정하면, 프로젝트 루트 기준으로 `lib/` 폴더의 JAR을 참조합니다.

---

## **✅ 2. Maven 로컬 리포지토리에 JAR을 직접 설치 (더 좋은 방법)**
Maven이 **공식 저장소에서 찾을 수 없는 JAR 파일**은 로컬 리포지토리에 수동으로 설치할 수도 있습니다.  

### **📌 ① JAR을 로컬 Maven Repository에 설치**
아래 명령어 실행:  
```bash
mvn install:install-file -Dfile=C:/mdms/workspace/lib/stringutil.jar \
                         -DgroupId=org.stringutil \
                         -DartifactId=stringutil \
                         -Dversion=1.0.0 \
                         -Dpackaging=jar
```
🚀 실행하면 `~/.m2/repository/org/stringutil/stringutil/1.0.0/stringutil-1.0.0.jar` 에 저장됨  

### **📌 ② `pom.xml`에서 일반적인 의존성 추가**
```xml
<dependency>
    <groupId>org.stringutil</groupId>
    <artifactId>stringutil</artifactId>
    <version>1.0.0</version>
    <scope>compile</scope>
</dependency>
```
✅ 이렇게 하면 **배포 시에도 자동으로 의존성을 가져오고, systemPath 없이 사용 가능**  

---

## **✅ 3. 운영 서버에 배포할 때, JAR 경로 설정 방법**
운영 서버에 배포할 때, 프로젝트에서 참조하는 JAR의 경로를 적절히 설정해야 합니다.  
**배포 환경에서 동작을 보장하려면, 실행되는 JAR 파일이 올바른 위치에 있어야 합니다.**  

### **📌 ① `lib/` 폴더를 함께 배포하는 경우**
배포할 때 프로젝트 폴더 구조를 유지하며, `lib/` 폴더를 함께 배포하는 방식입니다.  
**예제: `Tomcat`, `WildFly`, `Spring Boot` 등에서 사용하는 경우**
```
/opt/mdms/
│── mdms.war
│── lib/
│   ├── stringutil.jar
│   ├── other-library.jar
```
✅ `pom.xml`에서 `systemPath` 사용 시, `lib/` 폴더를 같이 배포  

---

### **📌 ② JAR 파일을 `WEB-INF/lib` 내부로 복사하는 경우**
**예제: `WildFly`나 `Tomcat`을 사용할 경우**
```
mdms/
│── src/main/webapp/
│   ├── WEB-INF/
│   │   ├── lib/                ← 여기에 JAR 파일 복사
│   │   │   ├── stringutil.jar
│   │   │   ├── other-library.jar
```
✅ 이 방법을 사용하면 **Maven의 `systemPath` 없이 자동으로 JAR이 로드됨**  

---

## **✅ 4. 배포 후 실행할 때 JAR을 참조하는 방법**
배포한 프로젝트에서 실행할 때, **클래스패스(classpath)에 JAR을 포함해야 합니다.**  
### **📌 ① `java -cp` 명령어 사용**
```bash
java -cp "lib/*:target/mdms.jar" com.example.MainClass
```
✅ `lib/*` 을 포함하면 `lib/` 폴더에 있는 모든 JAR 파일을 클래스패스에 추가함  

---

## **✅ 결론: 배포 및 JAR 참조 방법 추천**
| 방법 | 장점 | 단점 |
|------|------|------|
| `lib/` 폴더를 프로젝트 내부에 두고 `systemPath` 사용 | 설정이 간단하고 운영 환경에서도 동일하게 유지 가능 | Maven 방식이 아님 |
| Maven 로컬 리포지토리에 설치 후 `pom.xml`에서 참조 (**권장**) | 가장 안정적, `systemPath` 없이 정상적인 의존성 관리 가능 | 로컬에서 `mvn install` 한 후 사용해야 함 |
| `WEB-INF/lib` 내부로 JAR 복사 (**웹 애플리케이션 배포 시 추천**) | WildFly/Tomcat에서 자동으로 로드 가능 | JAR 변경 시 재배포 필요 |
| 실행할 때 `-cp "lib/*:target/mdms.jar"` 사용 | 모든 JAR을 포함하여 실행 가능 | 수동으로 경로 지정해야 함 |

---

### **🚀 최종 추천:**
1. **Maven Repository에 JAR을 설치** (`mvn install:install-file`)  
2. **Maven의 일반적인 `<dependency>` 방식으로 추가**  
3. **운영 서버에 배포할 때 `lib/` 폴더를 함께 배포**  
4. **웹 애플리케이션이면 `WEB-INF/lib`에 JAR 복사**  

📌 **Maven으로 JAR을 관리하면 의존성 문제 없이 배포와 실행이 쉬워집니다!**
