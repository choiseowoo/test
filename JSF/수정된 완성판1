DAO에서 특정 조건을 만족하는 경우 `1`, `0`, `2`, `3`, `4` 값을 반환하고, `UserBean`에서는 해당 숫자만 받아서 처리하는 방식으로 만들 수 있습니다.  

### 1. **UserDAO.java (변경된 부분)**  
DAO에서 특정 조건을 검사한 후, 해당하는 값을 반환하는 `getSearchResultStatus` 메서드를 추가합니다.  

```java
import java.util.HashMap;
import java.util.Map;

public class UserDAO {
    private SqlSessionFactory sqlSessionFactory;

    public UserDAO() {
        sqlSessionFactory = MyBatisUtil.getSqlSessionFactory();
    }

    public int getSearchResultStatus(String organization, String userName, String userCode, String userEmail) {
        try (SqlSession session = sqlSessionFactory.openSession()) {
            Map<String, Object> params = new HashMap<>();
            params.put("organization", organization);
            params.put("userName", userName);
            params.put("userCode", userCode);
            params.put("userEmail", userEmail);

            // 검색 조건이 아예 없는 경우 1 반환
            if ((userName == null || userName.trim().isEmpty()) &&
                (userCode == null || userCode.trim().isEmpty())) {
                return 1;
            }

            int totalRecords = session.selectOne("UserMapper.getTotalUserCount", params);

            // 검색 결과가 없는 경우 2 반환
            if (totalRecords == 0) {
                return 2;
            }

            // 검색 결과가 30건을 초과하는 경우 3 반환
            if (totalRecords > 30) {
                return 3;
            }

            // 정상적으로 검색이 가능한 경우 0 반환
            return 0;
        }
    }
}
```

---

### 2. **UserBean.java (변경된 부분)**  
`UserBean`에서는 DAO에서 반환하는 숫자 값만 받아서 처리합니다.

```java
public String searchUsers() {
    int status = userDAO.getSearchResultStatus(organization, userName, userCode, userEmail);

    switch (status) {
        case 1:
            addErrorMessage("유저명 또는 코드명을 입력해주세요.");
            return "userPage?faces-redirect=true";

        case 2:
            addErrorMessage("검색 결과가 없습니다.");
            return "userPage?faces-redirect=true";

        case 3:
            addErrorMessage("검색 결과가 30건을 초과합니다. 검색 조건을 좁혀주세요.");
            return "userPage?faces-redirect=true";

        case 0:
            updateUserList(currentPage);
            return null;

        default:
            addErrorMessage("알 수 없는 오류가 발생했습니다.");
            return "userPage?faces-redirect=true";
    }
}
```

---

### 3. **UserMapper.xml (변경된 부분)**  
`getTotalUserCount` 쿼리를 그대로 사용하지만, DAO에서 반환하는 로직을 변경했기 때문에 XML 변경은 필요 없습니다.  

```xml
<select id="getTotalUserCount" resultType="int">
    SELECT COUNT(*)
    FROM users
    WHERE 1=1
    <if test="organization != null"> AND organization = #{organization} </if>
    <if test="userName != null"> AND user_name LIKE CONCAT('%', #{userName}, '%') </if>
    <if test="userCode != null"> AND user_code LIKE CONCAT('%', #{userCode}, '%') </if>
    <if test="userEmail != null"> AND user_email LIKE CONCAT('%', #{userEmail}, '%') </if>
</select>
```

---

이제 DAO에서 숫자 값만 반환하고, `UserBean`에서 해당 값에 따라 처리를 수행하도록 만들었습니다.
