### **📌 문제 분석**  
현재 `MsSession msSession = (MsSession) session.getAttribute(SESSIONKEY_SESSION);` 코드에서  
`ClassCastException`이 발생하는 이유는 **세션에 저장된 데이터 타입이 `MsSession`이 아니라 다른 타입(String, Map 등)이기 때문**입니다.  

---

### **📌 해결 방법**  
1. **세션에 저장된 객체가 `MsSession`인지 확인하고 변환 처리**
2. **잘못된 타입이 들어왔을 경우 안전하게 처리**

---

### **✅ 방법 1) `instanceof` 검사하여 안전하게 변환**  
```java
public static MsSession getMsSession() {
    if (FacesContext.getCurrentInstance() == null) {
        return null;
    }
    ExternalContext extContext = FacesContext.getCurrentInstance().getExternalContext();
    if (extContext == null) {
        return null;
    }
    HttpServletRequest servletRequest = (HttpServletRequest) extContext.getRequest();
    if (servletRequest == null) {
        return null;
    }
    HttpSession session = servletRequest.getSession();
    if (session == null) {
        return null;
    }

    // 세션에서 객체 가져오기
    Object sessionObj = session.getAttribute(SESSIONKEY_SESSION);

    // 올바른 타입인지 검사
    if (sessionObj instanceof MsSession) {
        return (MsSession) sessionObj;
    } else {
        System.out.println("⚠️ 세션 데이터 타입 불일치: " + sessionObj);
        return null;  // 혹은 새로운 MsSession 객체 생성 가능
    }
}
```
💡 **`instanceof`를 사용하여 세션에 저장된 데이터가 `MsSession` 타입인지 확인**하고,  
아니라면 `null`을 반환하거나 새로운 `MsSession` 객체를 생성하면 **에러 방지 가능**.

---

### **✅ 방법 2) `Map`을 사용하여 `MsSession` 객체 대신 저장**  
`MsSession` 객체 대신 `Map<String, Object>`을 사용하면 더 안전합니다.  
```java
public static MsSession getMsSession() {
    if (FacesContext.getCurrentInstance() == null) {
        return null;
    }
    ExternalContext extContext = FacesContext.getCurrentInstance().getExternalContext();
    if (extContext == null) {
        return null;
    }
    HttpServletRequest servletRequest = (HttpServletRequest) extContext.getRequest();
    if (servletRequest == null) {
        return null;
    }
    HttpSession session = servletRequest.getSession();
    if (session == null) {
        return null;
    }

    // 세션에서 객체 가져오기
    Object sessionObj = session.getAttribute(SESSIONKEY_SESSION);

    // 세션 데이터가 Map 형태라면 MsSession으로 변환
    if (sessionObj instanceof Map) {
        Map<String, Object> sessionData = (Map<String, Object>) sessionObj;
        
        MsSession msSession = new MsSession();
        msSession.setUserId((String) sessionData.get("USER_ID"));
        msSession.setUserRole((String) sessionData.get("USER_ROLE"));
        msSession.setUserToken((String) sessionData.get("USER_TOKEN"));
        
        return msSession;
    } else {
        System.out.println("⚠️ 세션 데이터가 MsSession 타입이 아님: " + sessionObj);
        return null;
    }
}
```
💡 **이 방식은 `SESSIONKEY_SESSION`에 저장된 값이 `Map<String, Object>`일 경우에도 동작하도록 함.**  
기존에 `session.setAttribute(SESSIONKEY_SESSION, "userid");`처럼 `String`이 저장되었을 경우도 방지 가능.

---

### **✅ 방법 3) `SessionScoped`를 사용하여 직접 관리**  
만약 JSF `@SessionScoped`를 사용하고 있다면, **세션 관리 클래스를 직접 만들어서 JSF에서 접근하는 방법도 있음**.

#### **📌 `SessionBean.java` (세션 관리 클래스)**
```java
import jakarta.enterprise.context.SessionScoped;
import jakarta.inject.Named;
import java.io.Serializable;

@Named
@SessionScoped
public class SessionBean implements Serializable {
    private String userId;
    private String userRole;
    private String userToken;

    // Getter & Setter
    public String getUserId() { return userId; }
    public void setUserId(String userId) { this.userId = userId; }

    public String getUserRole() { return userRole; }
    public void setUserRole(String userRole) { this.userRole = userRole; }

    public String getUserToken() { return userToken; }
    public void setUserToken(String userToken) { this.userToken = userToken; }
}
```
#### **📌 `index.xhtml`**
```xml
<h:outputText value="User Token: #{sessionBean.userToken}" />
<h:outputText value="User ID: #{sessionBean.userId}" />
<h:outputText value="User Role: #{sessionBean.userRole}" />
```
이렇게 하면 **JSF에서 자동으로 세션 데이터를 관리**하므로 `ClassCastException` 발생 가능성이 줄어듦.

---

### **📌 결론**
✅ `instanceof`를 사용하여 **세션에 저장된 객체가 `MsSession`인지 확인**  
✅ `Map<String, Object>`을 사용하여 **캐스팅 에러 방지**  
✅ `@SessionScoped`를 사용하여 **JSF에서 직접 관리 가능**  

이제 **ClassCastException 없이 세션을 안정적으로 사용할 수 있을 거야!**
