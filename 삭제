CSV 파일을 생성하고, ZIP 파일을 생성하고, ZIP 파일을 검색하고, 필요 시 파일을 삭제하는 기능을 모두 구현하는 예제 코드를 제공하겠습니다. 특히 ZIP 파일 삭제 시 발생하는 문제를 해결하기 위해 ZIP 파일이 성공적으로 생성되었는지 확인하는 과정을 추가하겠습니다.

다음은 그 예제입니다:

```java
import java.io.*;
import java.nio.file.*;
import java.util.zip.*;

public class FileHandler {

    public static void main(String[] args) {
        String csvFilePath = "example.csv";
        String zipFilePath = "example.zip";

        createCSVFile(csvFilePath);

        if (searchInCSVFile(csvFilePath, "searchTerm")) {
            createZipFile(csvFilePath, zipFilePath);
            deleteFile(csvFilePath); // CSV 파일 삭제
        }

        if (searchInZipFile(zipFilePath, "example.csv")) {
            deleteFile(zipFilePath); // ZIP 파일 삭제
        }
    }

    public static void createCSVFile(String filePath) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write("header1,header2,header3\n");
            writer.write("row1col1,row1col2,row1col3\n");
            writer.write("row2col1,row2col2,row2col3\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static boolean searchInCSVFile(String filePath, String searchTerm) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains(searchTerm)) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static void createZipFile(String sourceFilePath, String zipFilePath) {
        try (FileOutputStream fos = new FileOutputStream(zipFilePath);
             ZipOutputStream zos = new ZipOutputStream(fos);
             FileInputStream fis = new FileInputStream(sourceFilePath)) {
            ZipEntry zipEntry = new ZipEntry(new File(sourceFilePath).getName());
            zos.putNextEntry(zipEntry);
            
            byte[] bytes = new byte[1024];
            int length;
            while ((length = fis.read(bytes)) >= 0) {
                zos.write(bytes, 0, length);
            }
            zos.closeEntry();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static boolean searchInZipFile(String zipFilePath, String fileName) {
        try (ZipFile zipFile = new ZipFile(zipFilePath)) {
            return zipFile.getEntry(fileName) != null;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static void deleteFile(String filePath) {
        try {
            Files.deleteIfExists(Paths.get(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

이 코드에는 다음 기능들이 포함되어 있습니다:
1. **CSV 파일 생성 (`createCSVFile`)**: 주어진 경로에 CSV 파일을 생성합니다.
2. **CSV 파일에서 검색 (`searchInCSVFile`)**: 주어진 검색어가 CSV 파일에 있는지 확인합니다.
3. **ZIP 파일 생성 (`createZipFile`)**: 주어진 CSV 파일을 ZIP 파일로 압축합니다.
4. **ZIP 파일에서 검색 (`searchInZipFile`)**: ZIP 파일 내에 특정 파일이 있는지 확인합니다.
5. **파일 삭제 (`deleteFile`)**: 주어진 파일을 삭제합니다.

이 코드를 실행하면 다음과 같은 흐름이 이루어집니다:
1. CSV 파일을 생성합니다.
2. CSV 파일에서 특정 검색어를 찾습니다.
3. 검색어가 발견되면 CSV 파일을 ZIP 파일로 압축하고, 원래 CSV 파일을 삭제합니다.
4. ZIP 파일에서 특정 파일을 검색합니다.
5. 검색어가 발견되면 ZIP 파일을 삭제합니다.

이 과정을 통해 CSV 파일과 ZIP 파일 모두 적절히 생성, 검색 및 삭제할 수 있습니다.
