자바에서 오라클 데이터베이스의 컬럼 값을 읽어와서 JavaMail을 사용해 이메일로 송신하는 방법을 설명드리겠습니다. 다음 단계들을 따라주세요:

### 1. JDBC 드라이버와 JavaMail 라이브러리 추가

먼저, 오라클 JDBC 드라이버 (`ojdbc8.jar`)와 JavaMail 라이브러리 (`javax.mail.jar` 및 `activation.jar`)를 다운로드하고 프로젝트에 추가합니다. 이 두 가지 라이브러리를 클래스패스에 포함해야 합니다.

### 2. 자바 코드 작성

다음은 자바 코드로 오라클 데이터베이스에 접속하고, 특정 테이블의 컬럼 값을 읽어와 JavaMail을 사용해 이메일로 송신하는 예제입니다.

```java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class OracleToEmail {

    public static void main(String[] args) {
        // JDBC URL, 사용자 이름, 비밀번호 설정
        String jdbcUrl = "jdbc:oracle:thin:@localhost:1521:xe"; // 환경에 맞게 수정
        String username = "yourUsername"; // 오라클 사용자 이름
        String password = "yourPassword"; // 오라클 사용자 비밀번호

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        StringBuilder emailContent = new StringBuilder();

        try {
            // JDBC 드라이버 로드
            Class.forName("oracle.jdbc.driver.OracleDriver");

            // 데이터베이스 연결
            connection = DriverManager.getConnection(jdbcUrl, username, password);

            // SQL 쿼리 작성
            String sql = "SELECT column_name FROM table_name"; // 실제 테이블과 컬럼 이름으로 수정

            // Statement 객체 생성
            statement = connection.createStatement();

            // SQL 쿼리 실행
            resultSet = statement.executeQuery(sql);

            // 결과 처리
            while (resultSet.next()) {
                String columnValue = resultSet.getString("column_name"); // 실제 컬럼 이름으로 수정
                emailContent.append("Column Value: ").append(columnValue).append("\n");
            }

            // 이메일 송신
            sendEmail("recipient@example.com", "Subject: Database Column Values", emailContent.toString());

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            // 자원 해제
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public static void sendEmail(String to, String subject, String body) {
        // SMTP 서버 설정
        String host = "smtp.example.com"; // SMTP 서버 주소
        final String user = "yourEmail@example.com"; // 발신자 이메일 주소
        final String pass = "yourEmailPassword"; // 발신자 이메일 비밀번호

        // Properties 설정
        Properties props = new Properties();
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.starttls.enable", "true");

        // 세션 생성
        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                return new javax.mail.PasswordAuthentication(user, pass);
            }
        });

        try {
            // 이메일 메시지 작성
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(user));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
            message.setSubject(subject);
            message.setText(body);

            // 이메일 송신
            Transport.send(message);
            System.out.println("Email sent successfully!");

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
}
```

### 3. 코드 설명

1. **JDBC URL, 사용자 이름, 비밀번호 설정**:
   - `jdbcUrl`, `username`, `password`를 설정합니다. 환경에 맞게 수정해야 합니다.

2. **데이터베이스 연결**:
   - `DriverManager.getConnection`을 사용하여 데이터베이스에 연결합니다.

3. **SQL 쿼리 실행**:
   - `statement.executeQuery(sql)`을 사용하여 SQL 쿼리를 실행하고 결과를 `ResultSet` 객체로 받습니다.

4. **결과 처리**:
   - 결과 집합을 순회하며 각 행의 값을 `StringBuilder`에 추가합니다.

5. **이메일 송신**:
   - `sendEmail` 메서드를 호출하여 이메일을 송신합니다.
   - `sendEmail` 메서드는 JavaMail API를 사용하여 이메일을 송신합니다. SMTP 서버 설정 및 발신자 정보는 실제 값을 사용해 수정해야 합니다.

### 4. 실행

위 코드를 작성하고 컴파일 및 실행합니다. 클래스패스에 `ojdbc8.jar`와 JavaMail 라이브러리 JAR 파일들이 포함되어 있는지 확인합니다.

```sh
javac -cp .;path\to\ojdbc8.jar;path\to\javax.mail.jar;path\to\activation.jar OracleToEmail.java
java -cp .;path\to\ojdbc8.jar;path\to\javax.mail.jar;path\to\activation.jar OracleToEmail
```

이렇게 하면 오라클 데이터베이스에서 데이터를 읽어와 이메일로 송신할 수 있습니다. SMTP 서버 설정과 자격 증명을 환경에 맞게 수정하는 것을 잊지 마세요.
