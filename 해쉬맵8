`Objecttable` 형태로 프로퍼티 파일에서 데이터를 받아와서 `HashMap<Long, String>`으로 변환하는 방법을 설명하겠습니다. 주어진 상황에서, 프로퍼티 파일에서 `Objecttable` 형태로 데이터를 읽어와 `HashMap`으로 변환하려면 다음과 같은 단계를 따릅니다:

### 1. 프로퍼티 파일 예시

프로퍼티 파일(`codes.properties`)의 형식은 다음과 같다고 가정합니다:

```
typecode.10={"description": "갱신"}
typecode.20={"description": "작성"}
typecode.30={"description": "삭제"}
```

### 2. Java 코드

1. **프로퍼티 파일 로드**: `Properties` 클래스를 사용하여 프로퍼티 파일을 읽습니다.
2. **`Objecttable`을 `HashMap`으로 변환**: 읽어온 데이터를 `HashMap<Long, String>`으로 변환합니다.
3. **CSV 파일로 출력**: 변환된 `HashMap`을 사용하여 CSV 파일을 생성합니다.

### 3. Java 코드 예제

```java
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.json.JSONObject;

public class OracleToCSV {

    private static final String JDBC_URL = "jdbc:oracle:thin:@localhost:1521:xe"; // Oracle DB URL
    private static final String USERNAME = "your_username"; // DB username
    private static final String PASSWORD = "your_password"; // DB password

    public static void main(String[] args) {
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery("SELECT 이름, 전화번호, 코드번호 FROM your_table")) {

            // Load logcode mappings from properties
            Map<Long, String> codeMap = loadCodeMappings("codes.properties");

            // Write data to CSV, including code mappings
            writeToCSV(resultSet, codeMap, "output.csv");

        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }

    // Load code mappings from properties file into HashMap
    private static Map<Long, String> loadCodeMappings(String propertiesFile) throws IOException {
        Properties properties = new Properties();
        try (FileInputStream fis = new FileInputStream(propertiesFile)) {
            properties.load(fis);
        }

        Map<Long, String> codeMap = new HashMap<>();
        for (String key : properties.stringPropertyNames()) {
            if (key.startsWith("typecode.")) {
                Long code = Long.parseLong(key.substring("typecode.".length()));
                String jsonString = properties.getProperty(key);
                JSONObject jsonObject = new JSONObject(jsonString);
                String description = jsonObject.getString("description");
                codeMap.put(code, description);
            }
        }

        return codeMap;
    }

    // Write data from ResultSet to CSV, including code mappings
    private static void writeToCSV(ResultSet resultSet, Map<Long, String> codeMap, String fileName) throws IOException, SQLException {
        try (FileWriter fileWriter = new FileWriter(fileName)) {
            fileWriter.append("이름,전화번호,코드번호\n");

            while (resultSet.next()) {
                String name = resultSet.getString("이름");
                String phoneNumber = resultSet.getString("전화번호");
                Long codeNumber = resultSet.getLong("코드번호");

                // Lookup the logcode description from the map
                String logcodeDescription = codeMap.getOrDefault(codeNumber, "알 수 없음");

                fileWriter.append(name).append(',')
                          .append(phoneNumber).append(',')
                          .append(logcodeDescription).append('\n');
            }

            System.out.println("Data exported to CSV file successfully.");
        }
    }
}
```

### 4. 설명

1. **`loadCodeMappings` 메소드**:
   - 프로퍼티 파일을 읽어서 `Properties` 객체에 저장합니다.
   - `typecode.`로 시작하는 키를 찾고, JSON 문자열을 파싱하여 `HashMap<Long, String>`으로 변환합니다.
   - JSON 문자열에서 `description`을 추출하여 `codeMap`에 저장합니다.

2. **`writeToCSV` 메소드**:
   - `ResultSet`에서 데이터를 읽고, `codeMap`에서 설명을 찾아 CSV 파일에 기록합니다.

이 구조를 사용하면, 프로퍼티 파일에서 `Objecttable` 형태로 데이터를 읽어와서 CSV 파일에 출력할 수 있습니다. 프로퍼티 파일의 데이터 포맷에 맞게 JSON 파싱을 조정할 수 있습니다.
