Jakarta EE에서 MyBatis를 사용하는 방법은 여러 가지가 있지만, 보통 다음과 같은 방식이 사용돼요:  

### **1. `mybatis-config.xml`을 직접 읽는 방식 (XML 설정 방식)**  
**(전통적인 방법, 환경 설정 파일을 직접 관리할 때 사용)**  
```java
String resource = "mybatis-config.xml";
InputStream inputStream = Resources.getResourceAsStream(resource);
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
```
이 방식은 `mybatis-config.xml` 파일을 직접 읽어서 설정을 로드하는 방법이에요.

---

### **2. Jakarta EE의 CDI(Dependency Injection) + `@ApplicationScoped` 방식 (추천)**
**(Jakarta EE에서 MyBatis를 사용하는 일반적인 방법, `SqlSessionFactory`를 주입받음)**  

#### **(1) `SqlSessionFactory`를 생성하는 CDI Bean**
```java
package com.example.config;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Produces;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

@ApplicationScoped
public class MyBatisConfig {
    private static final String MYBATIS_CONFIG = "mybatis-config.xml";

    @Produces
    @ApplicationScoped
    public SqlSessionFactory createSqlSessionFactory() throws IOException {
        InputStream inputStream = Resources.getResourceAsStream(MYBATIS_CONFIG);
        return new SqlSessionFactoryBuilder().build(inputStream);
    }
}
```
> **이 방식의 장점:** Jakarta EE에서는 `@Produces`를 사용해 `SqlSessionFactory`를 관리할 수 있어요.

---

#### **(2) `SqlSessionFactory`를 주입받아 사용**
```java
package com.example.service;

import com.example.mapper.UserMapper;
import com.example.model.User;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

@ApplicationScoped
public class UserService {
    @Inject
    private SqlSessionFactory sqlSessionFactory;

    public User getUserByUsername(String username) {
        try (SqlSession session = sqlSessionFactory.openSession()) {
            UserMapper mapper = session.getMapper(UserMapper.class);
            return mapper.findByUsername(username);
        }
    }
}
```
> **주입 방식으로 `SqlSessionFactory`를 사용하면 Jakarta EE의 CDI 기능과 MyBatis를 쉽게 통합할 수 있어요.**  

---

### **3. `SqlSessionManager`를 사용하는 방식 (Thread-Safe)**
```java
package com.example.config;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.apache.ibatis.session.SqlSessionManager;

import java.io.IOException;
import java.io.InputStream;

public class MyBatisUtil {
    private static SqlSessionManager sqlSessionManager;

    static {
        try {
            InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");
            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
            sqlSessionManager = SqlSessionManager.newInstance(sqlSessionFactory);
        } catch (IOException e) {
            throw new RuntimeException("MyBatis 설정 로드 실패", e);
        }
    }

    public static SqlSessionManager getSqlSessionManager() {
        return sqlSessionManager;
    }
}
```
> `SqlSessionManager`는 `Thread-Safe`한 `SqlSession`을 제공하기 때문에 멀티스레드 환경에서 안정적이에요.  

사용 예시:  
```java
SqlSessionManager sqlSessionManager = MyBatisUtil.getSqlSessionManager();
UserMapper mapper = sqlSessionManager.getMapper(UserMapper.class);
User user = mapper.findByUsername("admin");
```

---

### **어떤 방법을 선택해야 할까?**
| 방법 | 설명 | 장점 | 단점 |
|------|------|------|------|
| **XML 직접 읽기 (`mybatis-config.xml`)** | `Resources.getResourceAsStream()` 사용 | 간단하고 설정 파일 관리 가능 | Jakarta EE의 DI와 통합되지 않음 |
| **CDI + `@ApplicationScoped` (추천)** | `SqlSessionFactory`를 주입받아 사용 | Jakarta EE의 DI 기능과 통합 가능 | 설정 파일이 필요 |
| **`SqlSessionManager` 사용** | `SqlSessionManager.newInstance()` 사용 | `Thread-Safe` 하므로 멀티스레드 환경에서 안정적 | 설정이 다소 복잡 |

**✅ Jakarta EE 환경에서는 `@ApplicationScoped` 방식이 가장 적절하고, 멀티스레드 환경이라면 `SqlSessionManager`도 고려 가능해요.**  
더 궁금한 점 있으면 알려줘!
