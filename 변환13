현재 상황을 고려할 때, `check.get("logcode")`가 여러 번 호출되면서 각 값을 개별적으로 출력하는 것이 문제입니다. 대신, 각 값을 `StringBuilder`에 추가하여 하나의 문자열로 결합해야 합니다.

아래는 `ObjectTable`의 레코드를 순회하면서 `logcode` 값을 하나의 문자열로 결합하는 코드 예제입니다.

### 예시 코드:

```java
import java.util.*;

public class ObjectTableExample {

    public static void main(String[] args) {
        // 예시 ObjectTable 생성
        ObjectTable objectTable = new ObjectTable();
        objectTable.addRecord(Map.of("Logcode", 10L, "Logname", "갱신"));
        objectTable.addRecord(Map.of("Logcode", 20L, "Logname", "작성"));
        objectTable.addRecord(Map.of("Logcode", 30L, "Logname", "삭제"));

        // logcode 값을 하나의 문자열로 결합하여 출력
        String result = getLogcodesAsString(objectTable);
        System.out.println(result); // 출력: 10, 20, 30
    }

    // ObjectTable에서 logcode 값을 추출하여 하나의 문자열로 결합하는 메소드
    private static String getLogcodesAsString(ObjectTable objectTable) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < objectTable.getRecordCount(); i++) {
            Map<String, Object> record = objectTable.getRecord(i);
            Object logCodeObj = record.get("Logcode");

            if (logCodeObj instanceof Long) {
                Long logCode = (Long) logCodeObj;
                String logCodeStr = String.valueOf(logCode); // Long 값을 String으로 변환

                if (sb.length() > 0) {
                    sb.append(", ");
                }
                sb.append(logCodeStr);
            }
        }

        return sb.toString();
    }
}

// ObjectTable 클래스의 예시
class ObjectTable {
    private final List<Map<String, Object>> records = new ArrayList<>();

    public void addRecord(Map<String, Object> record) {
        records.add(record);
    }

    public Map<String, Object> getRecord(int index) {
        return records.get(index);
    }

    public int getRecordCount() {
        return records.size();
    }
}
```

### 설명:

1. **ObjectTable 클래스**:
    - `ObjectTable` 클래스는 `List<Map<String, Object>>` 형태로 데이터를 저장하고, 레코드를 추가 및 조회하는 메소드를 제공합니다.

2. **getLogcodesAsString 메소드**:
    - `ObjectTable`의 모든 레코드를 순회하며 `logcode` 값을 추출합니다.
    - `StringBuilder`를 사용하여 각 값을 결합합니다.
    - 첫 번째 값 이후에 `", "`를 추가합니다.

3. **main 메소드**:
    - 예시 데이터를 `ObjectTable`에 추가하고, `getLogcodesAsString` 메소드를 호출하여 결과를 출력합니다.

이 코드는 `logcode` 값을 하나의 문자열로 결합하여 출력합니다. 결과는 "10, 20, 30" 형식으로 출력됩니다. 이 코드를 실행하면 각 `logcode` 값이 줄 바꿈 없이 하나의 문자열로 결합되어 출력됩니다.
