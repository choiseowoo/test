자바에서 수정할 수 없는 패키지를 사용하는 상황에서, 메일 전송 시 첨부 파일을 추가하려면, 패키지의 원래 기능을 보완할 수 있는 방법을 찾아야 합니다. 이런 경우, `Mail` 클래스를 확장하여 필요한 기능을 추가하거나, 래퍼 클래스를 만들어 기능을 확장할 수 있습니다. 여기서는 래퍼 클래스를 만드는 방법을 설명하겠습니다.

먼저, `Mail` 클래스를 확장하는 래퍼 클래스를 만들어봅니다. 이 래퍼 클래스는 파일 첨부 기능을 구현하고, 원래의 `Mail` 클래스를 사용하여 메일을 전송합니다.

### Step 1: `Mail` 클래스 래퍼 만들기

```java
public class MailWrapper {
    private Mail mail;
    private List<File> attachments;

    public MailWrapper(String title, String body) {
        this.mail = new Mail(title, body);
        this.attachments = new ArrayList<>();
    }

    public MailWrapper from(String email, String name) {
        mail.from(email, name);
        return this;
    }

    public MailWrapper to(String email, String name) {
        mail.to(email, name);
        return this;
    }

    public MailWrapper addFile(String filePath) {
        File file = new File(filePath);
        if (file.exists() && file.isFile()) {
            attachments.add(file);
        } else {
            System.out.println("File does not exist: " + filePath);
        }
        return this;
    }

    public void send() {
        // 여기에 파일 첨부 코드를 추가해야 합니다.
        // 예를 들어, Multipart 메일 전송을 위해 javax.mail 패키지를 사용할 수 있습니다.

        try {
            // JavaMail API를 사용하여 메일을 보낼 수 있습니다.
            // Session, MimeMessage 등을 설정하는 코드가 필요합니다.

            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.example.com"); // SMTP 서버 설정
            Session session = Session.getInstance(props, null);

            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(mail.getFromAddress(), mail.getFromName()));
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(mail.getToAddress(), mail.getToName()));
            message.setSubject(mail.getTitle());

            // 메일 본문과 첨부 파일을 포함하기 위해 Multipart를 사용합니다.
            Multipart multipart = new MimeMultipart();

            // 본문 추가
            MimeBodyPart textPart = new MimeBodyPart();
            textPart.setText(mail.getBody());
            multipart.addBodyPart(textPart);

            // 첨부 파일 추가
            for (File file : attachments) {
                MimeBodyPart filePart = new MimeBodyPart();
                filePart.attachFile(file);
                multipart.addBodyPart(filePart);
            }

            // 전체 내용을 메일에 추가
            message.setContent(multipart);

            // 메일 전송
            Transport.send(message);
            System.out.println("Mail sent successfully with attachments.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Step 2: 사용 예제

이제 `MailWrapper` 클래스를 사용하여 메일을 전송할 수 있습니다.

```java
public class Main {
    public static void main(String[] args) {
        MailWrapper mail = new MailWrapper("타이틀", "본문");
        mail.from("보내는 사람 이메일", "작성자명")
            .to("받는 사람 이메일", "받는 사람명")
            .addFile("파일주소1")
            .addFile("파일주소2")
            .send();
    }
}
```

위 코드에서는 JavaMail API를 사용하여 메일을 생성하고 파일을 첨부하는 기능을 추가했습니다. `MailWrapper` 클래스는 원래의 `Mail` 클래스의 기능을 확장하여 파일 첨부 기능을 구현합니다. 실제로 메일 전송이 잘 되도록 SMTP 서버 설정 등을 적절히 변경해야 합니다.
