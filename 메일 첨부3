## 네, 전용 패키지에서 메소드를 받아 사용하면서 기능을 추가하는 방법은 여러 가지가 있습니다. 기존 패키지를 건들지 않고 기능을 추가하는 방법을 몇 가지 소개해 드리겠습니다.

**1. 데코레이터 패턴:**

* 기존 메소드 기능을 감싸서 새로운 기능을 추가하는 패턴입니다.
* **장점:**
    * 기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있습니다.
    * 코드의 유연성과 재사용성을 높일 수 있습니다.
* **단점:**
    * 코드 복잡성이 증가할 수 있습니다.
    * 디버깅이 어려울 수 있습니다.

```java
// 기존 메소드
public void sendEmail(String toEmail, String subject, String body) {
    // 메일 전송 코드
}

// 데코레이터 클래스
public class AttachmentDecorator extends EmailSender {

    private String filePath;
    private String fileName;

    public AttachmentDecorator(EmailSender sender, String filePath, String fileName) {
        super(sender);
        this.filePath = filePath;
        this.fileName = fileName;
    }

    @Override
    public void sendEmail(String toEmail, String subject, String body) {
        // 기존 메소드 호출
        super.sendEmail(toEmail, subject, body);

        // 첨부파일 추가
        // ... (첨부파일 추가 코드)
    }
}

// 사용 예시
EmailSender sender = new AttachmentDecorator(new EmailSenderImpl(), "/path/to/file.txt", "file.txt");
sender.sendEmail("recipient@example.com", "Subject", "This is an email with an attachment.");
```

**2. 콜백 함수:**

* 메소드 실행 후에 콜백 함수를 호출하여 새로운 기능을 추가하는 방법입니다.
* **장점:**
    * 코드 간의 결합을 느슨하게 유지할 수 있습니다.
    * 필요에 따라 다양한 기능을 추가할 수 있습니다.
* **단점:**
    * 코드의 가독성이 떨어질 수 있습니다.
    * 디버깅이 어려울 수 있습니다.

```java
// 기존 메소드
public void sendEmail(String toEmail, String subject, String body, Callback callback) {
    // 메일 전송 코드

    // 콜백 함수 호출
    if (callback != null) {
        callback.onEmailSent();
    }
}

// 사용 예시
sendEmail("recipient@example.com", "Subject", "This is an email.", new Callback() {
    @Override
    public void onEmailSent() {
        // 첨부파일 추가
        // ... (첨부파일 추가 코드)
    }
});
```

**3. AOP (Aspect-Oriented Programming):**

* 코드 변경 없이 새로운 기능을 추가하는 프로그래밍 패러다임입니다.
* **장점:**
    * 코드 변경 없이 새로운 기능을 추가할 수 있습니다.
    * 코드의 모듈성을 높일 수 있습니다.
* **단점:**
    * AOP 프레임워크를 학습해야 합니다.
    * 코드의 실행 속도가 느려질 수 있습니다.

**4. 기타 방법:**

* 메소드 오버라이딩 (Java만 해당)
* 메소드 러핑
* XML 설정 파일 사용

**선택 가이드:**

* 추가하려는 기능의 복잡성
* 코드의 유지 관리성
* 개발자의 기술 수준

**추가 고려 사항:**

* 기존 패키지의 문서를 참고하십시오.
* 기능 추가로 인해 발생할 수 있는 부작용을 고려하십시오.
* 코드 변경 후에는 충분히 테스트하십시오.

**도움이 되었기를 바랍니다!**

이 외에도 궁금한 점이 있으면 언제든지 물어보세요.
