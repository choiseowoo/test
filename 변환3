`HashMap`의 `Long` 키를 `String`으로 변환하고 한 줄로 결합하여 `String`에 담는 방법은 `StringBuilder`를 사용하거나 Java 스트림을 활용할 수 있습니다. 아래는 두 가지 방법을 보여드립니다:

### 1. StringBuilder 사용

```java
import java.util.HashMap;
import java.util.Map;

public class HashMapExample {

    public static void main(String[] args) {
        // 예시 HashMap 생성
        Map<Long, Object> map = new HashMap<>();
        map.put(10L, "갱신");
        map.put(20L, "작성");
        map.put(30L, "삭제");

        // StringBuilder를 사용하여 Long 키를 String으로 변환하고 한 줄로 결합
        StringBuilder sb = new StringBuilder();
        for (Long key : map.keySet()) {
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(key);
        }
        String result = sb.toString();
        System.out.println(result); // 출력: 10, 20, 30
    }
}
```

### 2. Java 스트림 사용

```java
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class HashMapExample {

    public static void main(String[] args) {
        // 예시 HashMap 생성
        Map<Long, Object> map = new HashMap<>();
        map.put(10L, "갱신");
        map.put(20L, "작성");
        map.put(30L, "삭제");

        // Java 스트림을 사용하여 Long 키를 String으로 변환하고 한 줄로 결합
        String result = map.keySet().stream()
                           .map(String::valueOf)
                           .collect(Collectors.joining(", "));
        System.out.println(result); // 출력: 10, 20, 30
    }
}
```

### 설명

- **StringBuilder 사용 방법**:
  - `StringBuilder` 객체를 생성하여 `HashMap`의 각 키를 반복하면서 `StringBuilder`에 추가합니다. 각 키를 추가할 때 `", "`를 구분자로 사용합니다.
  
- **Java 스트림 사용 방법**:
  - `map.keySet().stream()`으로 `HashMap`의 키를 스트림으로 변환합니다.
  - `map(String::valueOf)`로 각 키를 `String`으로 변환합니다.
  - `collect(Collectors.joining(", "))`로 모든 키를 `", "` 구분자로 하나의 `String`으로 결합합니다.

두 방법 모두 `HashMap`의 `Long` 키를 `String`으로 변환하여 한 줄로 결합하는 데 적합합니다. `StringBuilder`를 사용하면 명시적으로 문자열을 빌드하는 과정을 제어할 수 있고, Java 스트림을 사용하면 더 간결하고 선언적으로 코드를 작성할 수 있습니다.
