import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.json.JSONObject;

public class OracleToCSV {
    public static void main(String[] args) {
        String jdbcUrl = "jdbc:oracle:thin:@localhost:1521:xe"; // Oracle DB URL
        String username = "your_username"; // DB username
        String password = "your_password"; // DB password

        String csvFile = "output.csv";
        String propertiesFile = "codes.properties"; // 프로퍼티 파일 경로

        try {
            // 1. 프로퍼티 파일에서 HashMap 생성
            Properties properties = loadProperties(propertiesFile);
            HashMap<Long, String> codeMap = parseProperties(properties);

            // 2. 오라클 데이터베이스에서 데이터 조회
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
                 Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery("SELECT id, 이름, 코드번호, 전화번호, 이메일 FROM your_table");
                 FileWriter fileWriter = new FileWriter(csvFile)) {

                // 3. CSV 헤더 작성
                fileWriter.append("id,이름,코드번호,전화번호,이메일\n");

                // 4. 데이터 조회 및 CSV 파일 작성
                while (resultSet.next()) {
                    fileWriter.append(resultSet.getString("id")).append(',')
                              .append(resultSet.getString("이름")).append(',');

                    Long codeNumber = resultSet.getLong("코드번호");
                    String codeString = codeMap.getOrDefault(codeNumber, "알수없음");
                    fileWriter.append(codeString).append(',');

                    fileWriter.append(resultSet.getString("전화번호")).append(',')
                              .append(resultSet.getString("이메일")).append('\n');
                }

                System.out.println("Data exported to CSV file successfully.");

            } catch (SQLException | IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 프로퍼티 파일을 읽어오는 메소드
    private static Properties loadProperties(String propertiesFile) throws IOException {
        Properties properties = new Properties();
        try (FileInputStream fis = new FileInputStream(propertiesFile)) {
            properties.load(fis);
        }
        return properties;
    }

    // 프로퍼티를 파싱하여 HashMap으로 변환하는 메소드
    private static HashMap<Long, String> parseProperties(Properties properties) {
        HashMap<Long, String> codeMap = new HashMap<>();
        for (Map.Entry<Object, Object> entry : properties.entrySet()) {
            String key = (String) entry.getKey();
            if (key.startsWith("typecode.")) {
                Long code = Long.parseLong(key.substring("typecode.".length()));
                String jsonString = (String) entry.getValue();
                JSONObject jsonObject = new JSONObject(jsonString);
                String typename = jsonObject.getString("typename");
                codeMap.put(code, typename);
            }
        }
        return codeMap;
    }
}
