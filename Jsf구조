네, 맞아요! 현재 시스템의 구조를 보면 **MyBatis의 `mapper.xml`에서 SQL을 작성하고, `mapper.java`에서 이를 호출한 후, DAO(Data Access Object)에서 처리하는 형태**라고 볼 수 있어요.  

하지만 현재 코드에서는 **DAO 계층이 생략**되어 있고, **JSF의 `UserBean.java`에서 직접 `mapper.java`를 호출**하는 방식이에요. 일반적인 3계층 구조를 생각하면 **DAO 계층을 추가**하는 것도 가능해요.

---

## **📌 현재 구조 분석 (DAO 생략형)**
### **1️⃣ `mapper.xml` (SQL 정의)**
- MyBatis의 `UserMapper.xml`에서 SQL을 작성
- `UserMapper.java`에서 이를 호출하여 실행  

### **2️⃣ `mapper.java` (MyBatis 인터페이스)**
- `UserMapper.java` 인터페이스에서 SQL을 실행할 수 있도록 정의  

### **3️⃣ `UserBean.java` (JSF의 Managed Bean)**
- `UserBean`에서 `mapper.java`를 직접 호출하여 데이터를 가져옴  

> **💡 현재 방식에서는 DAO 계층 없이 바로 `UserBean.java`에서 `UserMapper`를 호출!**  

---

## **✅ 일반적인 3계층 구조 (DAO 추가)**
**만약 DAO 계층을 추가하면 아래처럼 구조가 변경됩니다.**  

### **1️⃣ `mapper.xml` (SQL 정의 - 동일)**
```xml
<mapper namespace="com.example.mapper.UserMapper">
    <select id="getAllUsers" resultType="com.example.model.User">
        SELECT id, username, email FROM users;
    </select>
</mapper>
```
> **💡 SQL 쿼리는 동일하지만, 호출 방식이 바뀜!**

---

### **2️⃣ `UserMapper.java` (MyBatis 인터페이스 - 동일)**
```java
package com.example.mapper;

import com.example.model.User;
import java.util.List;

public interface UserMapper {
    List<User> getAllUsers();
}
```
> **💡 인터페이스는 그대로 유지**

---

### **3️⃣ `UserDAO.java` (DAO 계층 추가)**
📌 `src/main/java/com/example/dao/UserDAO.java`
```java
package com.example.dao;

import com.example.mapper.UserMapper;
import com.example.model.User;
import com.example.util.MyBatisUtil;
import org.apache.ibatis.session.SqlSession;
import java.util.List;

public class UserDAO {
    public List<User> getAllUsers() {
        try (SqlSession session = MyBatisUtil.getSession()) {
            UserMapper mapper = session.getMapper(UserMapper.class);
            return mapper.getAllUsers();
        }
    }
}
```
> **💡 DAO 계층을 추가하여 `UserMapper`를 직접 호출하도록 변경**  
> **💡 `SqlSession` 관리를 DAO에서 수행하여 유지보수성을 높임**  

---

### **4️⃣ `UserBean.java` (JSF의 Managed Bean - DAO 사용)**
📌 `src/main/java/com/example/bean/UserBean.java`
```java
package com.example.bean;

import com.example.dao.UserDAO;
import com.example.model.User;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;

@Named
@RequestScoped
public class UserBean implements Serializable {
    private List<User> users;
    private final UserDAO userDAO = new UserDAO(); // DAO 사용

    public List<User> getUsers() {
        if (users == null) {
            users = userDAO.getAllUsers(); // DAO에서 데이터 가져오기
        }
        return users;
    }
}
```
> **💡 JSF의 `UserBean`이 직접 `UserMapper`를 호출하는 대신, `UserDAO`를 사용하도록 변경**  
> **💡 DAO 계층이 추가되면서, 비즈니스 로직과 데이터 액세스가 분리됨**  

---

## **📌 결론**
✅ **현재 코드** → **DAO 없이 `UserBean`이 직접 `UserMapper` 호출**  
✅ **DAO 추가하면** → **`UserBean` → `UserDAO` → `UserMapper` → `mapper.xml` 순으로 호출**  
✅ **DAO를 추가하는 이유?**  
  - 비즈니스 로직과 DB 액세스를 분리해서 유지보수성을 높이기 위해  
  - 여러 곳에서 같은 `UserDAO`를 재사용 가능하도록 만들기 위해  
  - 테스트 용이성을 증가시키기 위해 (Mocking 가능)  

---

### **🚀 어떤 방식이 더 좋을까?**
**🔹 간단한 프로젝트** → 현재 방식 (`UserBean` → `UserMapper`)이 더 간단  
**🔹 규모가 커질 경우** → DAO 계층을 추가하는 것이 유지보수 측면에서 유리  

**👉 지금 개발 중인 MDMS 2세대 시스템이 어느 정도 규모가 있다면, DAO를 추가하는 것이 더 안정적일 가능성이 커요!** 🚀  
필요하면 `Service` 계층도 추가할 수도 있어요.  

**추가 질문 있으면 알려줘~!**
