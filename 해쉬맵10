주어진 예제를 바탕으로 `Objecttable`에서 `Long`과 `String` 값으로 `HashMap`을 생성하는 방법을 구체적으로 설명하겠습니다. 실제로 `Objecttable`에서 데이터를 추출하여 `HashMap<Long, String>`으로 변환하는 방식은 다음과 같습니다.

### 가정
- `Objecttable` 객체는 `getrecored(index)` 메소드를 통해 `Object` 배열을 반환하며, 이 배열의 각 `Object`는 `Map<String, Object>` 형태로 되어 있습니다.
- `Logcode`와 `Logname`은 `Object` 배열의 키입니다.

### 변환 과정
1. `Objecttable`에서 데이터를 가져와 `HashMap`으로 변환합니다.
2. 각 레코드에서 `Logcode`와 `Logname` 값을 추출하여 `HashMap`에 저장합니다.

### 코드 예제

```java
import java.util.HashMap;
import java.util.Map;

public class ObjectTableExample {

    public static void main(String[] args) {
        // 예시 Objecttable 생성 (실제 Objecttable 객체는 다를 수 있습니다)
        ObjectTable objectTable = new ObjectTable();
        objectTable.addRecord(Map.of("Logcode", 10L, "Logname", "갱신"));
        objectTable.addRecord(Map.of("Logcode", 20L, "Logname", "작성"));
        objectTable.addRecord(Map.of("Logcode", 30L, "Logname", "삭제"));

        // Objecttable에서 HashMap으로 변환
        Map<Long, String> codeMap = convertToHashMap(objectTable);

        // 결과 출력
        for (Map.Entry<Long, String> entry : codeMap.entrySet()) {
            System.out.println("코드번호: " + entry.getKey() + ", 설명: " + entry.getValue());
        }
    }

    // Objecttable을 HashMap으로 변환하는 메소드
    private static Map<Long, String> convertToHashMap(ObjectTable objectTable) {
        Map<Long, String> codeMap = new HashMap<>();
        
        for (int i = 0; i < objectTable.getRecordCount(); i++) {
            // Objecttable에서 레코드를 가져옴
            Map<String, Object> record = objectTable.getRecord(i);

            // Logcode와 Logname을 안전하게 추출하여 HashMap에 추가
            Object logCodeObj = record.get("Logcode");
            Object logNameObj = record.get("Logname");

            if (logCodeObj instanceof Long && logNameObj instanceof String) {
                Long logCode = (Long) logCodeObj;
                String logName = (String) logNameObj;
                codeMap.put(logCode, logName);
            } else {
                System.err.println("데이터 타입 불일치: " + logCodeObj + ", " + logNameObj);
            }
        }

        return codeMap;
    }
}

// ObjectTable 클래스의 예시 (실제 클래스 구조에 맞게 구현해야 합니다)
class ObjectTable {
    private final List<Map<String, Object>> records = new ArrayList<>();

    public void addRecord(Map<String, Object> record) {
        records.add(record);
    }

    public Map<String, Object> getRecord(int index) {
        return records.get(index);
    }

    public int getRecordCount() {
        return records.size();
    }
}
```

### 설명

1. **`ObjectTable` 클래스**:
   - `ObjectTable` 클래스를 정의하여 `addRecord`, `getRecord`, `getRecordCount` 메소드를 제공했습니다. 실제 클래스 구조에 맞게 수정해야 합니다.

2. **`convertToHashMap` 메소드**:
   - `ObjectTable`에서 각 레코드를 가져와 `Logcode`와 `Logname`을 추출합니다.
   - 추출된 값을 `Long`과 `String`으로 캐스팅하여 `HashMap`에 추가합니다.

3. **타입 확인 및 캐스팅**:
   - `instanceof`를 사용하여 타입을 확인한 후 안전하게 캐스팅합니다. 타입 불일치가 있는 경우 오류 메시지를 출력합니다.

이 코드를 사용하면 `ObjectTable`에서 `Logcode`와 `Logname`을 안전하게 추출하여 `HashMap<Long, String>`으로 변환할 수 있습니다. `ObjectTable`의 실제 구현에 맞게 클래스와 메소드들을 조정할 수 있습니다.
