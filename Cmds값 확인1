Java에서 `Process` 변수를 사용해 외부 프로세스를 실행한 후, 그 결과를 `System.out.println`으로 출력하는 방법은 `Process` 객체의 입력 스트림(`InputStream`)을 읽어 들여 출력하면 됩니다. `Process`가 실행된 후, 그 출력 값을 확인할 수 있습니다.

### 예시 코드

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class ProcessOutputExample {
    public static void main(String[] args) {
        try {
            // 예: 외부 프로세스로 "ping google.com" 명령어 실행
            Process process = Runtime.getRuntime().exec("ping google.com");

            // 프로세스의 출력 값을 읽어들이기 위한 BufferedReader
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;

            // 프로세스의 출력 내용을 한 줄씩 읽어서 출력
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            // 종료 코드를 확인하여 프로세스가 정상적으로 완료되었는지 확인
            int exitCode = process.waitFor();
            System.out.println("Exited with code: " + exitCode);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### 코드 설명
1. **`Process process = Runtime.getRuntime().exec("ping google.com");`**
   - `Runtime.getRuntime().exec`를 통해 외부 프로세스를 실행하고, 그 결과로 `Process` 객체를 반환받습니다.
   - 예제에서는 `"ping google.com"` 명령어를 실행하고 있습니다.

2. **`BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));`**
   - `process.getInputStream()`은 외부 프로세스의 표준 출력을 가리킵니다.
   - 이 스트림을 `BufferedReader`로 감싸서 한 줄씩 읽어올 수 있습니다.

3. **`while ((line = reader.readLine()) != null) { System.out.println(line); }`**
   - 프로세스가 출력하는 내용을 한 줄씩 읽어서 `System.out.println`으로 출력합니다.
   - 이렇게 하면 외부 프로세스가 출력한 모든 내용이 콘솔에 출력됩니다.

4. **`int exitCode = process.waitFor();`**
   - `waitFor()` 메서드는 프로세스가 종료될 때까지 기다리고, 종료 코드를 반환합니다.
   - 종료 코드가 0이면 성공적으로 완료된 것이며, 0이 아니면 오류가 발생한 것입니다.

이렇게 하면 외부 프로세스가 어떤 값을 출력했는지 `System.out.println`으로 확인할 수 있습니다.
