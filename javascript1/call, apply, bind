//call, apply, bind : 함수 호출 방식과 관계없이 this를 지정할 수 있음.
//call은 this를 특정값으로 지정 할 수 있다.
const mike = {
    name : "Mike",
};
const tom = {
    name : "Tom",
};
function showThisName(){
    console.log(this.name);
}
showThisName();
showThisName.call(mike); //call메서드는 모든 함수에서 사용할 수 있으며, this를 특정값으로 지정할 수 있습니다.
showThisName.call(tom);


//call, apply, bind : 함수 호출 방식과 관계없이 this를 지정할 수 있음.
//call은 this를 특정값으로 지정 할 수 있다.
const mike = {
    name : "Mike",
};
const tom = {
    name : "Tom",
};
function showThisName(){
    console.log(this.name);
}

function update(birthYear, occupation){
    this.birthYear = birthYear;
    this.occupation = occupation;
};

update.call(mike, 1999, 'singer');
console.log(mike);

update.call(tom, 2002, 'teacher');
console.log(tom);



//call, apply, bind : 함수 호출 방식과 관계없이 this를 지정할 수 있음.
//call은 this를 특정값으로 지정 할 수 있다.
const mike = {
    name : "Mike",
};
const tom = {
    name : "Tom",
};
function showThisName(){
    console.log(this.name);
}

function update(birthYear, occupation){
    this.birthYear = birthYear;
    this.occupation = occupation;
};

update.apply(mike, [1999, 'singer']); //apply는 함수 매개변수를 처리하는 방법을 제외하면 call과 완전히 같습니다.
console.log(mike);                    //call은 일반적인 함수와 마찬가지로 매개변수를 직접받지만, apply는 매개변수를 배열로 받습니다.

update.apply(tom, [2002, 'teacher']);
console.log(tom);



const nums = [3,10,1,6,4];
const minNum = Math.min(...nums);
const maxNum = Math.max(...nums);

console.log(minNum);
console.log(maxNum);



const nums = [3,10,1,6,4];
/*const minNum = Math.min(...nums);
const maxNum = Math.max(...nums);*/

const minNum = Math.min.apply(null, nums); //null도 되고 다른 값도 상관없다. 초기값일 뿐이기 때문에
const maxNum = Math.max.call(null, ...nums); //call은 객체로 받는다.

console.log(minNum);
console.log(maxNum);


//this값을 바꾸는것이다.
const mike = {
    name : "Mike",
};

function update(birthYear, occupation){
    this.birthYear = birthYear;
    this.occupation = occupation;
}

const updateMike = update.bind(mike);

updateMike(1998, "police");
console.log(mike);


const user = {
    name : "Mike",
    showName: function(){
        console.log(`Hello, ${this.name}`);
    },
};

user.showName();

let fn = user.showName;

fn.call(user);
fn.apply(user);

let boundFn = fn.bind(user);

boundFn();

