//유일한 식별자
const a = Symbol(); // new를 붙이지 않습니다.
const b = Symbol();

console.log(a);     // a === b; false, a == b; false 일치형을 붙여도 false로 값을 처리함.
Symbol()

console.log(b);
Symbol()


//Symbol : 유일성보장 - 같은 객체라고 해도 false로 받는다.
const id = Symbol('id');
const id2 = Symbol('id');

//id === id2 false , id == id2 false


//property key : 심볼형
const id = Symbol('id');
const user = {
    name : 'mike',
    age : 30,
    [id] : 'myid'
}
console.log(user);
console.log(user[id]);

const key = Object.keys(user);
const val = Object.values(user);
const entri = Object.entries(user);

//심볼은 건너뛰어 처리함.
console.log(key);
console.log(val);
console.log(entri);

for(let a in user){}

//property key : 심볼형
const user = {
    name : 'mike',
    age : 30,
}
const id = Symbol('id');
user[id] = 'myid';

user.name = 'myname'; //하면 안됨
user.a_key_no_one_userd = 'hahaha'; //하면 안됨



//Symbol.for(): 전역심볼
/*1. 하나의 심볼만 보장받을 수 있음
2. 없으면 만들고, 있으면 가져오기 때문
3. Symbol 함수는 매번 다른 Symbol값을 생성하지만, 
4. Symbol.for 메소드는 하나를 생성한 뒤 키를 통해 같은 Symbol을 공유*/

const id1 = Symbol.for('id');
const id2 = Symbol.for('id');

id1 === id2; //true반환


//Symbol.for(): 전역심볼
/*1. 하나의 심볼만 보장받을 수 있음
2. 없으면 만들고, 있으면 가져오기 때문
3. Symbol 함수는 매번 다른 Symbol값을 생성하지만, 
4. Symbol.for 메소드는 하나를 생성한 뒤 키를 통해 같은 Symbol을 공유*/

const id1 = Symbol.for('id');
const id2 = Symbol.for('id');

id1 === id2; //true반환

const key1 = Symbol.keyFor(id1);
const key2 = Symbol.keyFor(id2);
console.log(key1 === key2);

//전역심볼을 사용하지 않으면 keyfor을 사용할 수 없다.
// description
const id = Symbol('id 입니다.');
const check1 = id.description;
console.log(check1);

//숨겨진 Symbol key 보는법

const id3 = Symbol('id');
const user = {
    name : 'mike',
    age : 30,
    [id3] : 'myid'
}

const check2 = Object.getOwnPropertySymbols(user);
const check3 = Reflect.ownKeys(user);
console.log(check2);
console.log(check3);


//다른 개발자가 만들어 놓은 객체 - 다른사람이 만든 프로퍼티에 덮어쓰기 할 필요가 없다. 
const user = {
    name : 'mike',
    age : 30,
};

//내가 작업
    //user.showName = function(){};
    const showName = Symbol("show name");
    user[showName] = function(){
        console.log(this.name , this.age);
    };
    
    user[showName]();


//사용자가 접속하면 보는 메세지
for(let key in user){
    console.log(`His ${key} is ${user[key]}.`); 
};
