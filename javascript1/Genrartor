//함수의 실행을 멈췄다가 재개할 수 있는 기능
function* fn() {
    console.log(1);
    yield 1;
    console.log(2);
    yield 2;
    console.log(3);
    console.log(4);
    yield 3;
    return "finish";
}

const a = fn();
console.log(a.next()); //결과의 done:은 실행이 끝났으면 true 아니면 false

//함수의 실행을 멈췄다가 재개할 수 있는 기능
/*iterable
- Symbol.iterator 메서드가 있따.
- Symbol.iterator 는 iterator를 반환해야한다.
iterator
- next 메서드를 가진다.
- next 메서드는 value와 done 속성을 가진 객체를 반환한다.
-작업이 끝나면done은 true가 된다.*/


function* fn() {
    try{
    console.log(1);
    yield 1;
    console.log(2);
    yield 2;
    console.log(3);
    console.log(4);
    yield 3;
    return "finish";
    }catch(e){
        console.log(e);
    }
}

const a = fn();
console.log(a.next()); //결과의 done:은 실행이 끝났으면 true 아니면 false

//함수의 실행을 멈췄다가 재개할 수 있는 기능
/*iterable
- Symbol.iterator 메서드가 있따.
- Symbol.iterator 는 iterator를 반환해야한다.
iterator
- next 메서드를 가진다.
- next 메서드는 value와 done 속성을 가진 객체를 반환한다.
-작업이 끝나면done은 true가 된다.*/

const arr = [1,2,3,4,5];
const it = arr[Symbol.iterator]();
console.log(it.next());

//Generator는 값을 미리 만들어 두지 않음.

function* fn(){
  let index = 0;
  while(true){
    yield index++;  
  }
}
const a = fn();

//Generator yield*을 시용
function* gen1(){
    yield "w";
    yield "o";
    yield "r";
    yield "l";
    yield "d";
}

function* gen2(){
    yield "Hello,";
    yield* gen1();
    yield "!";
}

//Generator 제네레이터는 다른 작업을 하다가 다시 돌아와서 next()해주면 진행이 멈췄던 부분부터 이어서 실행 ex)Rdux Saga
