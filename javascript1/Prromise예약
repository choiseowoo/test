const pr = new Promise((resolve, reject) => { 
   setTimeout(() => {
       resolve("OK");
      // reject(new Error("err..."));
   }, 1000);
});

console.log("시작");
pr.then((result) =>{
    console.log(result);
})
    .catch((err) => {
        console.log(err);
    })
    .finally(() => {
        console.log("끝");
    });
    
    
    
    const f1 = (callback) => {
    setTimeout(function() {
        console.log("1번 주문 완료");
        callback();
    }, 100);
};

const f2 = (callback) => {
 setTimeout(function() {
     console.log("2번 주문 완료");
     callback();
    }, 100);
};

const f3 = (callback) => {
    setTimeout(function() {
        console.log("3번 주문 완료");
        callback();
    }, 1000);
};

console.log("시작");
f1(function(){
    f2(function(){
        f3(function(){
            console.log("끝");
        });
    });
});

//promise사용해서 만들기
//Promise.all은 하나의 정보라도 누락되면 전부다 에러로 처리된다.
const f1 = () => {
    //console.log(message);
    return new Promise((res, rej) =>{
        setTimeout(function() {
            res("1번 주문완료");
        }, 10);
    });
};

const f2 = (message) => {
    console.log(message);
    return new Promise((res, rej) =>{
        setTimeout(function() {
            res("2번 주문완료");
            //rej("살패");
            //rej(new Error("xx"));
        }, 10);
    });
};

const f3 = (message) => {
    console.log(message);
    return new Promise((res, rej) =>{
        setTimeout(function() {
            res("3번 주문완료");
        }, 10);
    });
};
//promise.all
//promise.race 하나라도 먼저 실행이 완료되면 그다음 값을 실행되지 않는다. ex)용량이 큰 툴에서 사용한다.
console.time("x");
//Promise.all([f1(), f2(), f3()]).then((res) => {
Promise.race([f1(), f2(), f3()]).then((res) => {
    console.log(res);
    console.timeEnd("x");
});


//프로미스 체이닝(Promise chaining)
/*console.time("시작");
f1()
    .then((res) => f2(res))
    .then((res) => f3(res))
    .then((res) => console.log(res))
    .catch(console.log)
    .finally(() => {
        console.timeEnd("시작");
    });*/
    
    
    
    


