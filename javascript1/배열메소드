// arr.splice(n, m) : 특정요소지움 n: 시작 m: 개수
let arr = [1,2,3,4,5];
arr.splice(1,2);
console.log(arr);

// arr.splice(n, m ,x) : 특정요소 지우고 추가 (x)
let arr = [1,2,3,4,5];
arr.splice(1,3, 100, 200);
console.log(arr);


// arr.splice(n, m ,x) : 특정요소 지우고 추가 (x)
let arr = ["나는", "철수", "입니다."];
arr.splice(1,0, "대한민국", "소방관");
console.log(arr);

// arr.splice() : 삭제된 요소 반환
let arr = [1,2,3,4,5];
let result = arr.splice(1,2);
console.log(arr);
console.log(result);

//arr.slice(n,m) : n부터 m까지 반환
let arr = [1,2,3,4,5];
console.log(arr.slice(1,4)); // [2,3,4]

let arr2 = arr.slice();
console.log(arr2);

//arr.concat(arr2, arr3..) : 합쳐서 새배열 반환
let arr = [1,2];
console.log(arr.concat([3,4]));
console.log(arr.concat([3,4],[5,6]));
console.log(arr.concat([3,4],5,6));

//arr.forEach(fn) : 배열반복
let users = ['mike', 'Tom', 'Jane'];

user.forEach((item, index, arr) => {
    
});

let users = ['mike', 'Tom', 'Jane'];

users.forEach((name, index, arr) => {
    console.log(`${index + 1}, ${name}`);
});

//arr.indexOf / arr.lastIndexOf
let arr = [1,2,3,4,5,1,2,3];

console.log(arr.indexOf(3));
console.log(arr.indexOf(3,3));
console.log(arr.lastIndexOf(3));

//arr.includes(): 포함하는지 확인
let arr = [1,2,3];

console.log(arr.includes(2));
console.log(arr.includes(8));


//arr.find(fn) / arr.findIndex(fn) - 더 복잡함 함수를 처리할 수 있다. 짝수 확인 등
//단 첫번째 true 값만 반환하고 끝 만약 없으면 undefined를 반환
let arr = [1,2,3,4,5];
const result = arr.find((item) => {
        return item % 2 === 0;
});

console.log(result);

let userList = [
        { name: "Mike", age: 30},
        { name: "Jane", age: 27},
        { name: "Tom", age:10},
        ]
        

        const result = userList.find((user)=>{
           if(user.age < 19) {
                   return true;
           }
                   return false;
        });
        console.log(result);



let userList = [
        { name: "Mike", age: 30},
        { name: "Jane", age: 27},
        { name: "Tom", age:10},
        ]
        

        const result = userList.findIndex((user)=>{
           if(user.age < 19) {
                   return true;
           }
                   return false;
        });
        console.log(result);


//arr.filter(fn) - 만족하는 모든 요소를 배열로 반환
//find는 한번실행후 그외에는 undefined 그렇지만 filter는 모든 배열 반환
const arr = [1,2,3,4,5,6];

const result = arr.filter((item) =>{
        return item % 2 === 0;
})
        
        console.log(result);


//arr.reverse() : 역순으로 재정렬 ex)최신가입자 아이디 순서 , 최근게시판 순서

let arr = [1,2,3,4,5,6];

console.log(arr.reverse()); // 5,4,3,2,1


//arr.map(fn) 함수를 받아 특정 기능을 시행하고 새로운 배열을 반환
let userList = [
        { name: "Mike" , age:30 },
        { name: "Jane" , age:27 },
        { name: "Tom" , age:10 },
        ];
        
        
        let newUserList = userList.map((user, index) => {
                return Object.assign({}, user, {
                        id : index + 1,
                        isAdult: user.age > 19,
                });
        });
        
        console.log(newUserList);
        console.log(userList);
        
        
        
 //join, splice

let arr = ["안녕", "나는" , "철수야"];

let result = arr.join("-");

console.log(result);


//split 배열로 반환 배열을 하나하나 다 잘라서 구분

const users = "Mike, Jane, Tom, Tony";

const result = users.split(",");

console.log(result);


//Array.isArray() typeof로는 object로만 표시됨 object는 배열의 특수형태이기 때문에 확인 불가능
let user = {
        name : "Mike",
        age: 30,
};

let userList = ["Mike", "Tom", "Jane"];

console.log(typeof user);
console.log(typeof userList);

console.log(Array.isArray(user));
console.log(Array.isArray(userList));




