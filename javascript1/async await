//async를 넣으면 promise로 반환해준다.
async function getName(){
    //return Promise.resolve("Tom");
    throw new Error("err...");
}

//console.log(getName());
//getName().then((name) =>{
getName().catch((err) =>{
    console.log(err);
})

//await함수는 async함수에서만 사용할 수 있따.
function getName(name){
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(name);
        }, 1000);
    });
}

async function showName(){
    const result = await getName('Mike');
    console.log(result);
}

console.log("시작");
showName();



const f1 = (message) => {
    return new Promise((res, re) => {
        setTimeout(() =>{
            res("1번 주문 완료");
        }, 10);
    });
};

const f2 = (message) => {
    console.log(message);
    return  new Promise((res, re) => {
        setTimeout(() =>{
            res("2번 주문 완료");
        }, 10);
    });
};

const f3 = (message) => {
    console.log(message);
    return new Promise((res, re) => {
        setTimeout(() =>{
            res("3번 주문 완료");
        }, 10);
    });
};

console.log("시작");
async function order(){
    const result1 = await f1();
    const result2 = await f2(result1);
    const result3 = await f3(result2);
    console.log(result3);
    console.log("종료");
}
order();



const f1 = (message) => {
    return new Promise((res, re) => {
        setTimeout(() =>{
            res("1번 주문 완료");
        }, 10);
    });
};

const f2 = (message) => {
    console.log(message);
    return  new Promise((res, re) => {
        setTimeout(() =>{
            //res("2번 주문 완료");
            re(new Error("err..."));
        }, 10);
    });
};

const f3 = (message) => {
    console.log(message);
    return new Promise((res, re) => {
        setTimeout(() =>{
            res("3번 주문 완료");
        }, 10);
    });
};

console.log("시작");
async function order(){
    try{
    const result1 = await f1();
    const result2 = await f2(result1);
    const result3 = await f3(result2);
    console.log(result3);    
    }catch(e){
        console.log(e);
    }finally{
    console.log("종료");
    }
}
order();


const f1 = (message) => {
    return new Promise((res, re) => {
        setTimeout(() =>{
            res("1번 주문 완료");
        }, 10);
    });
};

const f2 = (message) => {
    console.log(message);
    return  new Promise((res, re) => {
        setTimeout(() =>{
        res("2번 주문 완료");
           // re(new Error("err..."));
        }, 10);
    });
};

const f3 = (message) => {
    console.log(message);
    return new Promise((res, re) => {
        setTimeout(() =>{
            res("3번 주문 완료");
        }, 10);
    });
};

console.log("시작");
async function order(){
    try{
        const result = await Promise.all([f1(), f2(), f3()]);
        console.log(result);
 /*   const result1 = await f1();
    const result2 = await f2(result1);
    const result3 = await f3(result2);
    console.log(result3);  */  
    }catch(e){
        console.log(e);
    }finally{
    console.log("종료");
    }
}
order();





